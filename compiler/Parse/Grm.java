
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Oct 23 19:34:38 IST 2019
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Wed Oct 23 19:34:38 IST 2019
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\003\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\006" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\030\005\000\002\031\005\000\002\016\004\000\002" +
    "\016\002\000\002\017\005\000\002\017\002\000\002\015" +
    "\005\000\002\013\011\000\002\013\013\000\002\021\006" +
    "\000\002\021\010\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\033\006\000\002\034\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\035\003\000\002\035\005\000\002" +
    "\035\005\000\002\036\004\000\002\036\006\000\002\037" +
    "\005\000\002\037\002\000\002\040\006\000\002\005\004" +
    "\000\002\005\002\000\002\006\005\000\002\006\002\000" +
    "\002\027\005\000\002\042\010\000\002\041\006\000\002" +
    "\007\007\000\002\010\004\000\002\010\002\000\002\032" +
    "\010\000\002\026\006\000\002\023\004\000\002\023\002" +
    "\000\002\024\005\000\002\024\002\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\016\004\014\005\017\006\005\012\013\037" +
    "\011\046\023\001\002\000\040\002\uffe4\007\uffe4\011\uffe4" +
    "\013\uffe4\015\uffe4\017\uffe4\021\uffe4\022\uffe4\040\uffe4\041" +
    "\uffe4\047\uffe4\050\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002" +
    "\000\040\002\uffdd\007\uffdd\011\uffdd\013\uffdd\015\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\040\uffdd\041\uffdd\047\uffdd\050\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\001\002\000\046\002\uffe8\007" +
    "\uffe8\011\uffe8\013\uffe8\014\162\015\uffe8\017\uffe8\020\164" +
    "\021\uffe8\022\uffe8\035\163\040\uffe8\041\uffe8\047\uffe8\050" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\040\002\uffe5" +
    "\007\uffe5\011\uffe5\013\uffe5\015\uffe5\017\uffe5\021\uffe5\022" +
    "\uffe5\040\uffe5\041\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\001\002\000\010\002\000\021\076\022\077\001" +
    "\002\000\016\004\014\005\017\006\005\012\013\037\011" +
    "\046\023\001\002\000\004\002\154\001\002\000\020\004" +
    "\014\005\017\006\005\012\013\013\145\037\011\046\023" +
    "\001\002\000\052\002\uffed\007\uffed\011\uffed\012\124\013" +
    "\uffed\014\123\015\uffed\016\122\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\035\uffed\040\uffed\041\uffed\047\uffed\050\uffed\054" +
    "\uffed\055\uffed\056\uffed\001\002\000\040\002\uffdf\007\uffdf" +
    "\011\uffdf\013\uffdf\015\uffdf\017\uffdf\021\uffdf\022\uffdf\040" +
    "\uffdf\041\uffdf\047\uffdf\050\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\001\002\000\040\002\uffe0\007\uffe0\011\uffe0\013\uffe0\015" +
    "\uffe0\017\uffe0\021\uffe0\022\uffe0\040\uffe0\041\uffe0\047\uffe0" +
    "\050\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000\040\002" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\040\uffe7\041\uffe7\047\uffe7\050\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\001\002\000\040\002\uffde\007\uffde\011\uffde" +
    "\013\uffde\015\uffde\017\uffde\021\uffde\022\uffde\040\uffde\041" +
    "\uffde\047\uffde\050\uffde\054\uffde\055\uffde\056\uffde\001\002" +
    "\000\046\002\uffeb\007\uffeb\011\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\035\uffeb\040\uffeb" +
    "\041\uffeb\047\uffeb\050\uffeb\054\uffeb\055\uffeb\056\uffeb\001" +
    "\002\000\040\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015\uffe2" +
    "\017\uffe2\021\uffe2\022\uffe2\040\uffe2\041\uffe2\047\uffe2\050" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\012\047\uffcc" +
    "\054\035\055\030\056\037\001\002\000\040\002\uffe3\007" +
    "\uffe3\011\uffe3\013\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3" +
    "\040\uffe3\041\uffe3\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\001\002\000\046\002\uffec\007\uffec\011\uffec\013\uffec" +
    "\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\035" +
    "\uffec\040\uffec\041\uffec\047\uffec\050\uffec\054\uffec\055\uffec" +
    "\056\uffec\001\002\000\040\002\uffe1\007\uffe1\011\uffe1\013" +
    "\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1\040\uffe1\041\uffe1" +
    "\047\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000" +
    "\040\002\uffe6\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017\uffe6" +
    "\021\uffe6\022\uffe6\040\uffe6\041\uffe6\047\uffe6\050\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\001\002\000\004\004\113\001\002" +
    "\000\004\047\103\001\002\000\012\047\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\001\002\000\012\047\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\001\002\000\012\047\uffff\054\uffff\055\uffff\056" +
    "\uffff\001\002\000\004\004\065\001\002\000\012\047\uffcc" +
    "\054\035\055\030\056\037\001\002\000\004\004\040\001" +
    "\002\000\004\025\041\001\002\000\010\004\043\016\044" +
    "\036\047\001\002\000\012\047\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\001\002\000\022\007\ufffb\013\ufffb\017\ufffb\035\ufffb" +
    "\047\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\006\004" +
    "\052\017\ufff5\001\002\000\022\007\ufff9\013\ufff9\017\ufff9" +
    "\035\ufff9\047\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000" +
    "\022\007\ufffa\013\ufffa\017\ufffa\035\ufffa\047\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\004\051\050\001\002\000" +
    "\004\004\051\001\002\000\022\007\ufff8\013\ufff8\017\ufff8" +
    "\035\ufff8\047\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\004\010\062\001\002\000\004\017\061\001\002\000\010" +
    "\007\055\013\ufff3\017\ufff3\001\002\000\004\004\052\001" +
    "\002\000\006\013\ufff6\017\ufff6\001\002\000\010\007\055" +
    "\013\ufff3\017\ufff3\001\002\000\006\013\ufff4\017\ufff4\001" +
    "\002\000\022\007\ufff7\013\ufff7\017\ufff7\035\ufff7\047\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\001\002\000\010\004\043\016" +
    "\044\036\047\001\002\000\010\007\ufff2\013\ufff2\017\ufff2" +
    "\001\002\000\004\047\uffcd\001\002\000\004\012\066\001" +
    "\002\000\006\004\052\013\ufff5\001\002\000\004\013\070" +
    "\001\002\000\006\010\072\025\071\001\002\000\016\004" +
    "\014\005\017\006\005\012\013\037\011\046\023\001\002" +
    "\000\004\004\073\001\002\000\004\025\074\001\002\000" +
    "\016\004\014\005\017\006\005\012\013\037\011\046\023" +
    "\001\002\000\016\021\076\022\077\047\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\001\002\000\016\004\014\005\017\006\005" +
    "\012\013\037\011\046\023\001\002\000\016\004\014\005" +
    "\017\006\005\012\013\037\011\046\023\001\002\000\040" +
    "\002\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\021" +
    "\uffdb\022\uffdb\040\uffdb\041\uffdb\047\uffdb\050\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\001\002\000\040\002\uffdc\007\uffdc\011" +
    "\uffdc\013\uffdc\015\uffdc\017\uffdc\021\uffdc\022\uffdc\040\uffdc" +
    "\041\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\056\uffdc\001" +
    "\002\000\016\021\076\022\077\047\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\001\002\000\020\004\014\005\017\006\005\012" +
    "\013\037\011\046\023\050\uffd4\001\002\000\014\011\110" +
    "\013\uffd2\021\076\022\077\050\uffd2\001\002\000\004\050" +
    "\106\001\002\000\040\002\uffce\007\uffce\011\uffce\013\uffce" +
    "\015\uffce\017\uffce\021\uffce\022\uffce\040\uffce\041\uffce\047" +
    "\uffce\050\uffce\054\uffce\055\uffce\056\uffce\001\002\000\006" +
    "\013\uffd5\050\uffd5\001\002\000\016\004\014\005\017\006" +
    "\005\012\013\037\011\046\023\001\002\000\014\011\110" +
    "\013\uffd2\021\076\022\077\050\uffd2\001\002\000\006\013" +
    "\uffd3\050\uffd3\001\002\000\006\010\114\035\115\001\002" +
    "\000\010\004\043\016\044\036\047\001\002\000\016\004" +
    "\014\005\017\006\005\012\013\037\011\046\023\001\002" +
    "\000\016\021\076\022\077\047\uffef\054\uffef\055\uffef\056" +
    "\uffef\001\002\000\004\035\120\001\002\000\016\004\014" +
    "\005\017\006\005\012\013\037\011\046\023\001\002\000" +
    "\016\021\076\022\077\047\uffee\054\uffee\055\uffee\056\uffee" +
    "\001\002\000\006\004\133\017\uffc8\001\002\000\016\004" +
    "\014\005\017\006\005\012\013\037\011\046\023\001\002" +
    "\000\020\004\014\005\017\006\005\012\013\013\uffd4\037" +
    "\011\046\023\001\002\000\004\013\126\001\002\000\040" +
    "\002\uffd6\007\uffd6\011\uffd6\013\uffd6\015\uffd6\017\uffd6\021" +
    "\uffd6\022\uffd6\040\uffd6\041\uffd6\047\uffd6\050\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\001\002\000\010\015\130\021\076\022" +
    "\077\001\002\000\004\051\131\001\002\000\016\004\014" +
    "\005\017\006\005\012\013\037\011\046\023\001\002\000" +
    "\040\002\uffcb\007\uffcb\011\uffcb\013\uffcb\015\uffcb\017\uffcb" +
    "\021\076\022\077\040\uffcb\041\uffcb\047\uffcb\050\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\001\002\000\004\025\143\001\002" +
    "\000\004\017\142\001\002\000\006\007\136\017\uffc6\001" +
    "\002\000\004\004\133\001\002\000\004\017\uffc9\001\002" +
    "\000\006\007\136\017\uffc6\001\002\000\004\017\uffc7\001" +
    "\002\000\040\002\uffca\007\uffca\011\uffca\013\uffca\015\uffca" +
    "\017\uffca\021\uffca\022\uffca\040\uffca\041\uffca\047\uffca\050" +
    "\uffca\054\uffca\055\uffca\056\uffca\001\002\000\016\004\014" +
    "\005\017\006\005\012\013\037\011\046\023\001\002\000" +
    "\012\007\uffc5\017\uffc5\021\076\022\077\001\002\000\040" +
    "\002\uffda\007\uffda\011\uffda\013\uffda\015\uffda\017\uffda\021" +
    "\uffda\022\uffda\040\uffda\041\uffda\047\uffda\050\uffda\054\uffda" +
    "\055\uffda\056\uffda\001\002\000\012\011\147\013\uffd7\021" +
    "\076\022\077\001\002\000\016\004\014\005\017\006\005" +
    "\012\013\037\011\046\023\001\002\000\004\013\151\001" +
    "\002\000\040\002\uffd9\007\uffd9\011\uffd9\013\uffd9\015\uffd9" +
    "\017\uffd9\021\uffd9\022\uffd9\040\uffd9\041\uffd9\047\uffd9\050" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002\000\012\011\147" +
    "\013\uffd7\021\076\022\077\001\002\000\004\013\uffd8\001" +
    "\002\000\004\002\001\001\002\000\010\021\076\022\077" +
    "\040\156\001\002\000\016\004\014\005\017\006\005\012" +
    "\013\037\011\046\023\001\002\000\040\002\uffcf\007\uffcf" +
    "\011\uffcf\013\uffcf\015\uffcf\017\uffcf\021\076\022\077\040" +
    "\uffcf\041\160\047\uffcf\050\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\001\002\000\016\004\014\005\017\006\005\012\013\037" +
    "\011\046\023\001\002\000\040\002\uffd0\007\uffd0\011\uffd0" +
    "\013\uffd0\015\uffd0\017\uffd0\021\076\022\077\040\uffd0\041" +
    "\uffd0\047\uffd0\050\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002" +
    "\000\016\004\014\005\017\006\005\012\013\037\011\046" +
    "\023\001\002\000\016\004\014\005\017\006\005\012\013" +
    "\037\011\046\023\001\002\000\004\004\165\001\002\000" +
    "\046\002\uffe9\007\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\035\uffe9\040\uffe9\041" +
    "\uffe9\047\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002" +
    "\000\040\002\uffd1\007\uffd1\011\uffd1\013\uffd1\015\uffd1\017" +
    "\uffd1\021\076\022\077\040\uffd1\041\uffd1\047\uffd1\050\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\001\002\000\010\015\170\021" +
    "\076\022\077\001\002\000\046\002\uffea\007\uffea\011\uffea" +
    "\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\035\uffea\040\uffea\041\uffea\047\uffea\050\uffea\054\uffea" +
    "\055\uffea\056\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\036\003\011\004\007\007\014\022\005\026" +
    "\023\027\021\032\017\033\024\034\020\035\003\036\026" +
    "\040\006\041\025\042\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\154\007\014\022\005\026\023\027" +
    "\021\032\017\033\024\034\020\035\003\036\026\040\006" +
    "\041\025\042\015\001\001\000\002\001\001\000\034\004" +
    "\145\007\014\022\005\026\023\027\021\032\017\033\024" +
    "\034\020\035\003\036\026\040\006\041\025\042\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\030\011\035\012\032\013\031" +
    "\021\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\063\011\035\012\032" +
    "\013\031\021\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\041\030\044\031\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\053\016\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\055\001\001\000\004\015\056" +
    "\001\001\000\002\001\001\000\004\017\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\062\030\044" +
    "\031\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\053\016\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\101\007\014\022" +
    "\005\026\023\027\021\032\017\033\024\034\020\035\003" +
    "\036\026\040\006\041\025\042\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\074\007\014\022\005" +
    "\026\023\027\021\032\017\033\024\034\020\035\003\036" +
    "\026\040\006\041\025\042\015\001\001\000\002\001\001" +
    "\000\034\004\100\007\014\022\005\026\023\027\021\032" +
    "\017\033\024\034\020\035\003\036\026\040\006\041\025" +
    "\042\015\001\001\000\034\004\077\007\014\022\005\026" +
    "\023\027\021\032\017\033\024\034\020\035\003\036\026" +
    "\040\006\041\025\042\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\103\005\104" +
    "\007\014\022\005\026\023\027\021\032\017\033\024\034" +
    "\020\035\003\036\026\040\006\041\025\042\015\001\001" +
    "\000\004\006\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\110\007\014\022\005" +
    "\026\023\027\021\032\017\033\024\034\020\035\003\036" +
    "\026\040\006\041\025\042\015\001\001\000\004\006\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\116\030\044\031\045\001\001\000\034\004\115\007\014" +
    "\022\005\026\023\027\021\032\017\033\024\034\020\035" +
    "\003\036\026\040\006\041\025\042\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\120\007\014\022" +
    "\005\026\023\027\021\032\017\033\024\034\020\035\003" +
    "\036\026\040\006\041\025\042\015\001\001\000\002\001" +
    "\001\000\006\023\133\025\134\001\001\000\034\004\126" +
    "\007\014\022\005\026\023\027\021\032\017\033\024\034" +
    "\020\035\003\036\026\040\006\041\025\042\015\001\001" +
    "\000\036\004\103\005\124\007\014\022\005\026\023\027" +
    "\021\032\017\033\024\034\020\035\003\036\026\040\006" +
    "\041\025\042\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\131" +
    "\007\014\022\005\026\023\027\021\032\017\033\024\034" +
    "\020\035\003\036\026\040\006\041\025\042\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\136\001\001\000\004\025\137\001\001\000\002" +
    "\001\001\000\004\024\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\143\007\014\022\005\026\023" +
    "\027\021\032\017\033\024\034\020\035\003\036\026\040" +
    "\006\041\025\042\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\147\001\001\000\034\004\151\007" +
    "\014\022\005\026\023\027\021\032\017\033\024\034\020" +
    "\035\003\036\026\040\006\041\025\042\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\156\007\014\022\005\026\023\027\021\032\017" +
    "\033\024\034\020\035\003\036\026\040\006\041\025\042" +
    "\015\001\001\000\002\001\001\000\034\004\160\007\014" +
    "\022\005\026\023\027\021\032\017\033\024\034\020\035" +
    "\003\036\026\040\006\041\025\042\015\001\001\000\002" +
    "\001\001\000\034\004\166\007\014\022\005\026\023\027" +
    "\021\032\017\033\024\034\020\035\003\036\026\040\006" +
    "\041\025\042\015\001\001\000\034\004\165\007\014\022" +
    "\005\026\023\027\021\032\017\033\024\034\020\035\003" +
    "\036\026\040\006\041\025\042\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  //public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fieldCreate ::= ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fieldCreateListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fieldCreateList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arrCreate ::= ID LBRACK exp RBRACK OF exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decList ::= dec decList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // letExp ::= LET decList IN expList END 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifThen ::= IF exp THEN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*ifThen*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifThenElse ::= IF exp THEN exp ELSE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(32/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= lValue ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expListAux ::= SEMICOLON exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expList ::= exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // callExp ::= ID LPAREN expList RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // seqExpAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // seqExp ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // infixExp ::= exp MINUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // infixExp ::= exp PLUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // infixExp ::= INT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= arrCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= letExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= ifThenElse 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= ifThen 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= assignment 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= recCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= infixExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= callExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= seqExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= STRING 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= lValue 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldExp ::= lValue DOT ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*fieldExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subscript ::= lValue LBRACK exp RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*subscript*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lValue ::= fieldExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lValue ::= subscript 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lValue ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDec ::= VAR ID ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fieldDec ::= ID COLON ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fieldDecListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fieldDecList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arrTy ::= ARRAY OF ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ty ::= arrTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ty ::= recTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ty ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tyDec ::= TYPE ID EQ ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= funcDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= tyDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec ::= varDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

