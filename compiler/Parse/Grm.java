
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Oct 29 11:17:15 GMT 2020
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Thu Oct 29 11:17:15 GMT 2020
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\022\003\000\002\022\004\000\002\017\003" +
    "\000\002\017\004\000\002\020\003\000\002\020\004\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\012\004\000\002\012\002\000\002\021" +
    "\006\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\005\000\002\025\005\000\002\027\004\000" +
    "\002\027\002\000\002\030\005\000\002\030\002\000\002" +
    "\026\005\000\002\015\011\000\002\015\013\000\002\016" +
    "\007\000\002\016\011\000\002\014\006\000\002\014\010" +
    "\000\002\036\003\000\002\036\005\000\002\036\006\000" +
    "\002\036\006\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\051" +
    "\004\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\042\004\000\002\042\006\000\002\043" +
    "\005\000\002\043\002\000\002\044\006\000\002\007\004" +
    "\000\002\007\002\000\002\010\005\000\002\010\002\000" +
    "\002\005\004\000\002\005\002\000\002\006\005\000\002" +
    "\006\002\000\002\032\005\000\002\045\006\000\002\046" +
    "\010\000\002\046\005\000\002\046\005\000\002\047\006" +
    "\000\002\050\012\000\002\011\007\000\002\037\010\000" +
    "\002\031\006\000\002\034\004\000\002\034\002\000\002" +
    "\035\005\000\002\035\002\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\044\002\ufff3\003\035\004\034\005\050\006" +
    "\011\012\007\022\013\037\033\042\046\043\014\046\047" +
    "\052\041\053\021\054\006\055\052\056\020\057\042\001" +
    "\002\000\004\002\263\001\002\000\016\002\ufffe\047\ufffe" +
    "\054\ufffe\055\ufffe\056\020\057\ufffe\001\002\000\004\004" +
    "\250\001\002\000\034\003\035\004\034\005\050\006\011" +
    "\012\007\013\241\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\072\002\uffd6\007\uffd6" +
    "\011\uffd6\013\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\040\uffd6\041\uffd6\044\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\001\002\000\072\002\uffdb\007\uffdb\011\uffdb\013\uffdb\015" +
    "\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\040\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\001\002\000\016\002" +
    "\ufffa\047\ufffa\054\ufffa\055\ufffa\056\ufffa\057\042\001\002" +
    "\000\032\003\035\004\034\005\050\006\011\012\007\022" +
    "\013\037\033\042\046\043\014\046\047\052\041\053\021" +
    "\001\002\000\004\004\230\001\002\000\016\002\ufff7\047" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\100" +
    "\002\uffdd\007\uffdd\011\uffdd\013\uffdd\014\221\015\uffdd\017" +
    "\uffdd\020\222\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\223\040\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd" +
    "\050\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\001\002\000" +
    "\016\002\ufffc\047\ufffc\054\006\055\ufffc\056\ufffc\057\ufffc" +
    "\001\002\000\004\004\215\001\002\000\072\002\uffdc\007" +
    "\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\040\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\001\002\000\016\002\ufff5\047\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\001\002\000\072\002\uffd7\007\uffd7\011" +
    "\uffd7\013\uffd7\015\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7\044\uffd7\045\uffd7" +
    "\047\uffd7\050\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\001" +
    "\002\000\072\002\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2" +
    "\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\040\uffd2\041\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002\000\072\002\uffd0" +
    "\007\uffd0\011\uffd0\013\uffd0\015\uffd0\017\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\040\uffd0\041\uffd0\044" +
    "\uffd0\045\uffd0\047\uffd0\050\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\001\002\000\072\002\uffd4\007\uffd4\011\uffd4\013" +
    "\uffd4\015\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\047\uffd4" +
    "\050\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\001\002\000" +
    "\072\002\uffcd\007\uffcd\011\uffcd\013\uffcd\015\uffcd\017\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\040\uffcd" +
    "\041\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\001\002\000\016\002\ufff8\047\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000\072\002" +
    "\uffd5\007\uffd5\011\uffd5\013\uffd5\015\uffd5\017\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\040\uffd5\041\uffd5" +
    "\044\uffd5\045\uffd5\047\uffd5\050\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\001\002\000\016\002\ufff3\047\ufff3\054\006" +
    "\055\052\056\020\057\042\001\002\000\032\003\035\004" +
    "\034\005\050\006\011\012\007\022\013\037\033\042\046" +
    "\043\014\046\047\052\041\053\021\001\002\000\104\002" +
    "\uffe1\007\uffe1\011\uffe1\012\161\013\uffe1\014\160\015\uffe1" +
    "\016\157\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\044\uffe1\045" +
    "\uffe1\047\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\001\002\000\032\003\035\004\034\005\050\006\011\012" +
    "\007\022\013\037\033\042\046\043\014\046\047\052\041" +
    "\053\021\001\002\000\072\002\uffd3\007\uffd3\011\uffd3\013" +
    "\uffd3\015\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\047\uffd3" +
    "\050\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002\000" +
    "\004\002\uffff\001\002\000\072\002\uffd1\007\uffd1\011\uffd1" +
    "\013\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1\047" +
    "\uffd1\050\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\001\002" +
    "\000\072\002\uffce\007\uffce\011\uffce\013\uffce\015\uffce\017" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\040" +
    "\uffce\041\uffce\044\uffce\045\uffce\047\uffce\050\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\001\002\000\004\004\150\001" +
    "\002\000\072\002\uffcf\007\uffcf\011\uffcf\013\uffcf\015\uffcf" +
    "\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\040\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\001\002\000\072\002\uffd9" +
    "\007\uffd9\011\uffd9\013\uffd9\015\uffd9\017\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\040\uffd9\041\uffd9\044" +
    "\uffd9\045\uffd9\047\uffd9\050\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\001\002\000\072\002\uffd8\007\uffd8\011\uffd8\013" +
    "\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\040\uffd8\041\uffd8\044\uffd8\045\uffd8\047\uffd8" +
    "\050\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\001\002\000" +
    "\032\003\035\004\034\005\050\006\011\012\007\022\013" +
    "\037\033\042\046\043\014\046\047\052\041\053\021\001" +
    "\002\000\014\047\ufff3\054\006\055\052\056\020\057\042" +
    "\001\002\000\072\002\uffda\007\uffda\011\uffda\013\uffda\015" +
    "\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\040\uffda\041\uffda\044\uffda\045\uffda\047\uffda\050\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\001\002\000\016\002" +
    "\ufff6\047\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002" +
    "\000\004\004\104\001\002\000\034\002\000\021\061\022" +
    "\055\023\065\024\056\025\062\026\060\027\066\030\063" +
    "\031\064\032\057\033\054\034\067\001\002\000\032\003" +
    "\035\004\034\005\050\006\011\012\007\022\013\037\033" +
    "\042\046\043\014\046\047\052\041\053\021\001\002\000" +
    "\032\003\035\004\034\005\050\006\011\012\007\022\013" +
    "\037\033\042\046\043\014\046\047\052\041\053\021\001" +
    "\002\000\032\003\035\004\034\005\050\006\011\012\007" +
    "\022\013\037\033\042\046\043\014\046\047\052\041\053" +
    "\021\001\002\000\032\003\035\004\034\005\050\006\011" +
    "\012\007\022\013\037\033\042\046\043\014\046\047\052" +
    "\041\053\021\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\032\003\035\004\034" +
    "\005\050\006\011\012\007\022\013\037\033\042\046\043" +
    "\014\046\047\052\041\053\021\001\002\000\032\003\035" +
    "\004\034\005\050\006\011\012\007\022\013\037\033\042" +
    "\046\043\014\046\047\052\041\053\021\001\002\000\032" +
    "\003\035\004\034\005\050\006\011\012\007\022\013\037" +
    "\033\042\046\043\014\046\047\052\041\053\021\001\002" +
    "\000\032\003\035\004\034\005\050\006\011\012\007\022" +
    "\013\037\033\042\046\043\014\046\047\052\041\053\021" +
    "\001\002\000\032\003\035\004\034\005\050\006\011\012" +
    "\007\022\013\037\033\042\046\043\014\046\047\052\041" +
    "\053\021\001\002\000\032\003\035\004\034\005\050\006" +
    "\011\012\007\022\013\037\033\042\046\043\014\046\047" +
    "\052\041\053\021\001\002\000\032\003\035\004\034\005" +
    "\050\006\011\012\007\022\013\037\033\042\046\043\014" +
    "\046\047\052\041\053\021\001\002\000\072\002\uffaf\007" +
    "\uffaf\011\uffaf\013\uffaf\015\uffaf\017\uffaf\021\061\022\055" +
    "\023\065\024\056\025\062\026\060\027\066\030\063\031" +
    "\064\032\057\033\uffaf\034\uffaf\040\uffaf\041\uffaf\044\uffaf" +
    "\045\uffaf\047\uffaf\050\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\001\002\000\056\002\uffc3\007\uffc3\011\uffc3\013\uffc3" +
    "\015\uffc3\017\uffc3\021\061\022\055\023\065\024\056\033" +
    "\uffc3\034\uffc3\040\uffc3\041\uffc3\044\uffc3\045\uffc3\047\uffc3" +
    "\050\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000" +
    "\072\002\uffc8\007\uffc8\011\uffc8\013\uffc8\015\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\040\uffc8" +
    "\041\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\001\002\000\056\002\uffc4\007\uffc4" +
    "\011\uffc4\013\uffc4\015\uffc4\017\uffc4\021\061\022\055\023" +
    "\065\024\056\033\uffc4\034\uffc4\040\uffc4\041\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\050\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\001\002\000\056\002\uffc1\007\uffc1\011\uffc1\013\uffc1" +
    "\015\uffc1\017\uffc1\021\061\022\055\023\065\024\056\033" +
    "\uffc1\034\uffc1\040\uffc1\041\uffc1\044\uffc1\045\uffc1\047\uffc1" +
    "\050\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\001\002\000" +
    "\056\002\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6\017\uffc6" +
    "\021\061\022\055\023\065\024\056\033\uffc6\034\uffc6\040" +
    "\uffc6\041\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\001\002\000\072\002\uffca\007" +
    "\uffca\011\uffca\013\uffca\015\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\065\024\056\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\040\uffca\041\uffca\044\uffca" +
    "\045\uffca\047\uffca\050\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\001\002\000\056\002\uffc5\007\uffc5\011\uffc5\013\uffc5" +
    "\015\uffc5\017\uffc5\021\061\022\055\023\065\024\056\033" +
    "\uffc5\034\uffc5\040\uffc5\041\uffc5\044\uffc5\045\uffc5\047\uffc5" +
    "\050\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\001\002\000" +
    "\056\002\uffc2\007\uffc2\011\uffc2\013\uffc2\015\uffc2\017\uffc2" +
    "\021\061\022\055\023\065\024\056\033\uffc2\034\uffc2\040" +
    "\uffc2\041\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\001\002\000\072\002\uffc7\007" +
    "\uffc7\011\uffc7\013\uffc7\015\uffc7\017\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\040\uffc7\041\uffc7\044\uffc7" +
    "\045\uffc7\047\uffc7\050\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\001\002\000\072\002\uffc9\007\uffc9\011\uffc9\013\uffc9" +
    "\015\uffc9\017\uffc9\021\uffc9\022\uffc9\023\065\024\056\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\047\uffc9\050" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000\072" +
    "\002\uffb0\007\uffb0\011\uffb0\013\uffb0\015\uffb0\017\uffb0\021" +
    "\061\022\055\023\065\024\056\025\062\026\060\027\066" +
    "\030\063\031\064\032\057\033\uffb0\034\uffb0\040\uffb0\041" +
    "\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\001\002\000\006\010\105\035\106\001" +
    "\002\000\010\004\111\016\112\036\115\001\002\000\032" +
    "\003\035\004\034\005\050\006\011\012\007\022\013\037" +
    "\033\042\046\043\014\046\047\052\041\053\021\001\002" +
    "\000\046\002\uffe3\021\061\022\055\023\065\024\056\025" +
    "\062\026\060\027\066\030\063\031\064\032\057\033\054" +
    "\034\067\047\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\001" +
    "\002\000\004\035\132\001\002\000\020\002\ufff1\035\ufff1" +
    "\047\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002\000" +
    "\006\004\120\017\uffeb\001\002\000\020\002\uffef\035\uffef" +
    "\047\uffef\054\uffef\055\uffef\056\uffef\057\uffef\001\002\000" +
    "\020\002\ufff0\035\ufff0\047\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\001\002\000\004\051\116\001\002\000\004\004" +
    "\117\001\002\000\020\002\uffee\035\uffee\047\uffee\054\uffee" +
    "\055\uffee\056\uffee\057\uffee\001\002\000\004\010\130\001" +
    "\002\000\004\017\127\001\002\000\010\007\123\013\uffe9" +
    "\017\uffe9\001\002\000\004\004\120\001\002\000\006\013" +
    "\uffec\017\uffec\001\002\000\010\007\123\013\uffe9\017\uffe9" +
    "\001\002\000\006\013\uffea\017\uffea\001\002\000\020\002" +
    "\uffed\035\uffed\047\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\001\002\000\004\004\131\001\002\000\010\007\uffe8\013" +
    "\uffe8\017\uffe8\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\046\002\uffe2\021\061" +
    "\022\055\023\065\024\056\025\062\026\060\027\066\030" +
    "\063\031\064\032\057\033\054\034\067\047\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\001\002\000\004\047\135\001" +
    "\002\000\034\003\035\004\034\005\050\006\011\012\007" +
    "\022\013\037\033\042\046\043\014\046\047\050\uffb6\052" +
    "\041\053\021\001\002\000\036\011\142\021\061\022\055" +
    "\023\065\024\056\025\062\026\060\027\066\030\063\031" +
    "\064\032\057\033\054\034\067\050\uffb4\001\002\000\004" +
    "\050\140\001\002\000\072\002\uffac\007\uffac\011\uffac\013" +
    "\uffac\015\uffac\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\040\uffac\041\uffac\044\uffac\045\uffac\047\uffac" +
    "\050\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001\002\000" +
    "\004\050\uffb7\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\036\011\142\021\061" +
    "\022\055\023\065\024\056\025\062\026\060\027\066\030" +
    "\063\031\064\032\057\033\054\034\067\050\uffb4\001\002" +
    "\000\004\050\uffb5\001\002\000\034\021\061\022\055\023" +
    "\065\024\056\025\062\026\060\027\066\030\063\031\064" +
    "\032\057\033\054\034\067\045\146\001\002\000\032\003" +
    "\035\004\034\005\050\006\011\012\007\022\013\037\033" +
    "\042\046\043\014\046\047\052\041\053\021\001\002\000" +
    "\072\002\uffae\007\uffae\011\uffae\013\uffae\015\uffae\017\uffae" +
    "\021\061\022\055\023\065\024\056\025\062\026\060\027" +
    "\066\030\063\031\064\032\057\033\054\034\067\040\uffae" +
    "\041\uffae\044\uffae\045\uffae\047\uffae\050\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\001\002\000\004\012\151\001\002" +
    "\000\006\004\120\013\uffeb\001\002\000\004\013\153\001" +
    "\002\000\020\002\uffe5\010\154\047\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\001\002\000\004\004\155\001\002\000" +
    "\016\002\uffe4\047\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\001\002\000\072\002\uffcc\007\uffcc\011\uffcc\013\uffcc\015" +
    "\uffcc\017\uffcc\021\061\022\055\023\065\024\056\025\062" +
    "\026\060\027\066\030\063\031\064\032\057\033\054\034" +
    "\067\040\uffcc\041\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002\000\006\004" +
    "\175\017\uffa8\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\034\003\035\004\034" +
    "\005\050\006\011\012\007\013\uffba\022\013\037\033\042" +
    "\046\043\014\046\047\052\041\053\021\001\002\000\004" +
    "\013\170\001\002\000\036\007\165\013\uffb8\021\061\022" +
    "\055\023\065\024\056\025\062\026\060\027\066\030\063" +
    "\031\064\032\057\033\054\034\067\001\002\000\004\013" +
    "\uffbb\001\002\000\032\003\035\004\034\005\050\006\011" +
    "\012\007\022\013\037\033\042\046\043\014\046\047\052" +
    "\041\053\021\001\002\000\036\007\165\013\uffb8\021\061" +
    "\022\055\023\065\024\056\025\062\026\060\027\066\030" +
    "\063\031\064\032\057\033\054\034\067\001\002\000\004" +
    "\013\uffb9\001\002\000\072\002\uffbc\007\uffbc\011\uffbc\013" +
    "\uffbc\015\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\040\uffbc\041\uffbc\044\uffbc\045\uffbc\047\uffbc" +
    "\050\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000" +
    "\034\015\172\021\061\022\055\023\065\024\056\025\062" +
    "\026\060\027\066\030\063\031\064\032\057\033\054\034" +
    "\067\001\002\000\102\002\uffde\007\uffde\011\uffde\013\uffde" +
    "\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\040\uffde\041\uffde\044" +
    "\uffde\045\uffde\047\uffde\050\uffde\051\173\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\001\002\000\032\003\035\004\034\005" +
    "\050\006\011\012\007\022\013\037\033\042\046\043\014" +
    "\046\047\052\041\053\021\001\002\000\072\002\uffab\007" +
    "\uffab\011\uffab\013\uffab\015\uffab\017\uffab\021\061\022\055" +
    "\023\065\024\056\025\062\026\060\027\066\030\063\031" +
    "\064\032\057\033\054\034\067\040\uffab\041\uffab\044\uffab" +
    "\045\uffab\047\uffab\050\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\001\002\000\004\025\205\001\002\000\004\017\204" +
    "\001\002\000\006\007\200\017\uffa6\001\002\000\004\004" +
    "\175\001\002\000\004\017\uffa9\001\002\000\006\007\200" +
    "\017\uffa6\001\002\000\004\017\uffa7\001\002\000\072\002" +
    "\uffaa\007\uffaa\011\uffaa\013\uffaa\015\uffaa\017\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\040\uffaa\041\uffaa" +
    "\044\uffaa\045\uffaa\047\uffaa\050\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\036\007\uffa5\017\uffa5" +
    "\021\061\022\055\023\065\024\056\025\062\026\060\027" +
    "\066\030\063\031\064\032\057\033\054\034\067\001\002" +
    "\000\034\021\061\022\055\023\065\024\056\025\062\026" +
    "\060\027\066\030\063\031\064\032\057\033\054\034\067" +
    "\040\210\001\002\000\032\003\035\004\034\005\050\006" +
    "\011\012\007\022\013\037\033\042\046\043\014\046\047" +
    "\052\041\053\021\001\002\000\072\002\uffb2\007\uffb2\011" +
    "\uffb2\013\uffb2\015\uffb2\017\uffb2\021\061\022\055\023\065" +
    "\024\056\025\062\026\060\027\066\030\063\031\064\032" +
    "\057\033\054\034\067\040\uffb2\041\212\044\uffb2\045\uffb2" +
    "\047\uffb2\050\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001" +
    "\002\000\032\003\035\004\034\005\050\006\011\012\007" +
    "\022\013\037\033\042\046\043\014\046\047\052\041\053" +
    "\021\001\002\000\072\002\uffb1\007\uffb1\011\uffb1\013\uffb1" +
    "\015\uffb1\017\uffb1\021\061\022\055\023\065\024\056\025" +
    "\062\026\060\027\066\030\063\031\064\032\057\033\054" +
    "\034\067\040\uffb1\041\uffb1\044\uffb1\045\uffb1\047\uffb1\050" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002\000\006" +
    "\002\ufff4\047\ufff4\001\002\000\004\025\216\001\002\000" +
    "\010\004\111\016\112\036\115\001\002\000\016\002\ufff2" +
    "\047\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\001\002\000" +
    "\016\002\ufffb\047\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\001\002\000\032\003\035\004\034\005\050\006\011\012" +
    "\007\022\013\037\033\042\046\043\014\046\047\052\041" +
    "\053\021\001\002\000\004\004\225\001\002\000\032\003" +
    "\035\004\034\005\050\006\011\012\007\022\013\037\033" +
    "\042\046\043\014\046\047\052\041\053\021\001\002\000" +
    "\072\002\uffb3\007\uffb3\011\uffb3\013\uffb3\015\uffb3\017\uffb3" +
    "\021\061\022\055\023\065\024\056\025\062\026\060\027" +
    "\066\030\063\031\064\032\057\033\054\034\067\040\uffb3" +
    "\041\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\001\002\000\100\002\uffe0\007\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040" +
    "\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\001\002\000\034\015\227\021" +
    "\061\022\055\023\065\024\056\025\062\026\060\027\066" +
    "\030\063\031\064\032\057\033\054\034\067\001\002\000" +
    "\100\002\uffdf\007\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf\047" +
    "\uffdf\050\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\001\002" +
    "\000\004\035\231\001\002\000\032\003\035\004\034\005" +
    "\050\006\011\012\007\022\013\037\033\042\046\043\014" +
    "\046\047\052\041\053\021\001\002\000\034\021\061\022" +
    "\055\023\065\024\056\025\062\026\060\027\066\030\063" +
    "\031\064\032\057\033\054\034\067\044\233\001\002\000" +
    "\032\003\035\004\034\005\050\006\011\012\007\022\013" +
    "\037\033\042\046\043\014\046\047\052\041\053\021\001" +
    "\002\000\034\021\061\022\055\023\065\024\056\025\062" +
    "\026\060\027\066\030\063\031\064\032\057\033\054\034" +
    "\067\045\235\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\072\002\uffad\007\uffad" +
    "\011\uffad\013\uffad\015\uffad\017\uffad\021\061\022\055\023" +
    "\065\024\056\025\062\026\060\027\066\030\063\031\064" +
    "\032\057\033\054\034\067\040\uffad\041\uffad\044\uffad\045" +
    "\uffad\047\uffad\050\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\001\002\000\072\002\uffcb\007\uffcb\011\uffcb\013\uffcb\015" +
    "\uffcb\017\uffcb\021\uffcb\022\uffcb\023\065\024\056\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000\016\002" +
    "\ufff9\047\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002" +
    "\000\072\002\uffc0\007\uffc0\011\uffc0\013\uffc0\015\uffc0\017" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\040" +
    "\uffc0\041\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\001\002\000\036\011\244\013" +
    "\uffbd\021\061\022\055\023\065\024\056\025\062\026\060" +
    "\027\066\030\063\031\064\032\057\033\054\034\067\001" +
    "\002\000\004\013\247\001\002\000\032\003\035\004\034" +
    "\005\050\006\011\012\007\022\013\037\033\042\046\043" +
    "\014\046\047\052\041\053\021\001\002\000\036\011\244" +
    "\013\uffbd\021\061\022\055\023\065\024\056\025\062\026" +
    "\060\027\066\030\063\031\064\032\057\033\054\034\067" +
    "\001\002\000\004\013\uffbe\001\002\000\072\002\uffbf\007" +
    "\uffbf\011\uffbf\013\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\040\uffbf\041\uffbf\044\uffbf" +
    "\045\uffbf\047\uffbf\050\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\001\002\000\004\012\251\001\002\000\006\004\120" +
    "\013\uffeb\001\002\000\004\013\253\001\002\000\006\010" +
    "\255\025\254\001\002\000\032\003\035\004\034\005\050" +
    "\006\011\012\007\022\013\037\033\042\046\043\014\046" +
    "\047\052\041\053\021\001\002\000\004\004\256\001\002" +
    "\000\004\025\257\001\002\000\032\003\035\004\034\005" +
    "\050\006\011\012\007\022\013\037\033\042\046\043\014" +
    "\046\047\052\041\053\021\001\002\000\046\002\uffe6\021" +
    "\061\022\055\023\065\024\056\025\062\026\060\027\066" +
    "\030\063\031\064\032\057\033\054\034\067\047\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\001\002\000\046\002\uffe7" +
    "\021\061\022\055\023\065\024\056\025\062\026\060\027" +
    "\066\030\063\031\064\032\057\033\054\034\067\047\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\001\002\000\016\002" +
    "\ufffd\047\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\062\003\003\004\052\011\026\012\036\013" +
    "\031\014\014\015\016\016\011\017\050\020\021\021\004" +
    "\022\027\031\030\032\025\036\015\037\007\041\022\042" +
    "\043\044\044\045\037\046\023\047\024\050\042\051\035" +
    "\001\001\000\002\001\001\000\006\021\004\022\261\001" +
    "\001\000\002\001\001\000\036\004\241\011\026\031\030" +
    "\032\025\036\015\037\007\041\022\042\043\044\044\045" +
    "\037\046\023\047\024\050\042\051\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\011\020\237\001" +
    "\001\000\036\004\236\011\026\031\030\032\025\036\015" +
    "\037\007\041\022\042\043\044\044\045\037\046\023\047" +
    "\024\050\042\051\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\016\017\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\012\213\013\031\014\014\015\016\016" +
    "\011\017\050\020\021\021\004\022\027\001\001\000\036" +
    "\004\206\011\026\031\030\032\025\036\015\037\007\041" +
    "\022\042\043\044\044\045\037\046\023\047\024\050\042" +
    "\051\035\001\001\000\002\001\001\000\036\004\155\011" +
    "\026\031\030\032\025\036\015\037\007\041\022\042\043" +
    "\044\044\045\037\046\023\047\024\050\042\051\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\144\011\026" +
    "\031\030\032\025\036\015\037\007\041\022\042\043\044" +
    "\044\045\037\046\023\047\024\050\042\051\035\001\001" +
    "\000\024\012\133\013\031\014\014\015\016\016\011\017" +
    "\050\020\021\021\004\022\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\102\011\026\031\030\032\025\036\015\037\007" +
    "\041\022\042\043\044\044\045\037\046\023\047\024\050" +
    "\042\051\035\001\001\000\036\004\101\011\026\031\030" +
    "\032\025\036\015\037\007\041\022\042\043\044\044\045" +
    "\037\046\023\047\024\050\042\051\035\001\001\000\036" +
    "\004\100\011\026\031\030\032\025\036\015\037\007\041" +
    "\022\042\043\044\044\045\037\046\023\047\024\050\042" +
    "\051\035\001\001\000\036\004\077\011\026\031\030\032" +
    "\025\036\015\037\007\041\022\042\043\044\044\045\037" +
    "\046\023\047\024\050\042\051\035\001\001\000\036\004" +
    "\076\011\026\031\030\032\025\036\015\037\007\041\022" +
    "\042\043\044\044\045\037\046\023\047\024\050\042\051" +
    "\035\001\001\000\036\004\075\011\026\031\030\032\025" +
    "\036\015\037\007\041\022\042\043\044\044\045\037\046" +
    "\023\047\024\050\042\051\035\001\001\000\036\004\074" +
    "\011\026\031\030\032\025\036\015\037\007\041\022\042" +
    "\043\044\044\045\037\046\023\047\024\050\042\051\035" +
    "\001\001\000\036\004\073\011\026\031\030\032\025\036" +
    "\015\037\007\041\022\042\043\044\044\045\037\046\023" +
    "\047\024\050\042\051\035\001\001\000\036\004\072\011" +
    "\026\031\030\032\025\036\015\037\007\041\022\042\043" +
    "\044\044\045\037\046\023\047\024\050\042\051\035\001" +
    "\001\000\036\004\071\011\026\031\030\032\025\036\015" +
    "\037\007\041\022\042\043\044\044\045\037\046\023\047" +
    "\024\050\042\051\035\001\001\000\036\004\070\011\026" +
    "\031\030\032\025\036\015\037\007\041\022\042\043\044" +
    "\044\045\037\046\023\047\024\050\042\051\035\001\001" +
    "\000\036\004\067\011\026\031\030\032\025\036\015\037" +
    "\007\041\022\042\043\044\044\045\037\046\023\047\024" +
    "\050\042\051\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\107\024\112\025" +
    "\113\001\001\000\036\004\106\011\026\031\030\032\025" +
    "\036\015\037\007\041\022\042\043\044\044\045\037\046" +
    "\023\047\024\050\042\051\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\121\027" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\123\001\001\000\004" +
    "\026\124\001\001\000\002\001\001\000\004\030\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\132\011\026\031\030\032" +
    "\025\036\015\037\007\041\022\042\043\044\044\045\037" +
    "\046\023\047\024\050\042\051\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\135\005\136\011\026" +
    "\031\030\032\025\036\015\037\007\041\022\042\043\044" +
    "\044\045\037\046\023\047\024\050\042\051\035\001\001" +
    "\000\004\006\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\142\011\026\031\030" +
    "\032\025\036\015\037\007\041\022\042\043\044\044\045" +
    "\037\046\023\047\024\050\042\051\035\001\001\000\004" +
    "\006\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\146\011\026\031\030\032\025\036\015\037\007" +
    "\041\022\042\043\044\044\045\037\046\023\047\024\050" +
    "\042\051\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\121\027\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\176\034\175\001\001\000\036\004" +
    "\170\011\026\031\030\032\025\036\015\037\007\041\022" +
    "\042\043\044\044\045\037\046\023\047\024\050\042\051" +
    "\035\001\001\000\040\004\162\007\161\011\026\031\030" +
    "\032\025\036\015\037\007\041\022\042\043\044\044\045" +
    "\037\046\023\047\024\050\042\051\035\001\001\000\002" +
    "\001\001\000\004\010\163\001\001\000\002\001\001\000" +
    "\036\004\165\011\026\031\030\032\025\036\015\037\007" +
    "\041\022\042\043\044\044\045\037\046\023\047\024\050" +
    "\042\051\035\001\001\000\004\010\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\173\011\026\031\030\032\025\036\015" +
    "\037\007\041\022\042\043\044\044\045\037\046\023\047" +
    "\024\050\042\051\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\200\001\001\000" +
    "\004\033\201\001\001\000\002\001\001\000\004\035\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\205\011\026\031\030\032\025\036\015\037\007\041\022" +
    "\042\043\044\044\045\037\046\023\047\024\050\042\051" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\210\011\026\031\030\032\025\036\015\037\007\041" +
    "\022\042\043\044\044\045\037\046\023\047\024\050\042" +
    "\051\035\001\001\000\002\001\001\000\036\004\212\011" +
    "\026\031\030\032\025\036\015\037\007\041\022\042\043" +
    "\044\044\045\037\046\023\047\024\050\042\051\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\216\024\112\025\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\225\011\026\031\030" +
    "\032\025\036\015\037\007\041\022\042\043\044\044\045" +
    "\037\046\023\047\024\050\042\051\035\001\001\000\002" +
    "\001\001\000\036\004\223\011\026\031\030\032\025\036" +
    "\015\037\007\041\022\042\043\044\044\045\037\046\023" +
    "\047\024\050\042\051\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\231\011\026\031\030\032\025\036" +
    "\015\037\007\041\022\042\043\044\044\045\037\046\023" +
    "\047\024\050\042\051\035\001\001\000\002\001\001\000" +
    "\036\004\233\011\026\031\030\032\025\036\015\037\007" +
    "\041\022\042\043\044\044\045\037\046\023\047\024\050" +
    "\042\051\035\001\001\000\002\001\001\000\036\004\235" +
    "\011\026\031\030\032\025\036\015\037\007\041\022\042" +
    "\043\044\044\045\037\046\023\047\024\050\042\051\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\242\001\001\000\002" +
    "\001\001\000\036\004\244\011\026\031\030\032\025\036" +
    "\015\037\007\041\022\042\043\044\044\045\037\046\023" +
    "\047\024\050\042\051\035\001\001\000\004\043\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\121\027\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\260\011\026\031\030\032\025" +
    "\036\015\037\007\041\022\042\043\044\044\045\037\046" +
    "\023\047\024\050\042\051\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\257\011\026\031\030\032" +
    "\025\036\015\037\007\041\022\042\043\044\044\045\037" +
    "\046\023\047\024\050\042\051\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Absyn.Exp parseResult;
  ErrorMsg.ErrorMsg errorMsg;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current.left, "CUP: Syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void unrecovered_syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current != null ? current.left : 0, "CUP: Unrecovered syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public void report_fatal_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 
  static Symbol.Symbol sym(String s) {
	  return Symbol.Symbol.symbol(s);
	}

  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fieldCreate ::= ID EQ exp 
            {
              Absyn.FieldExpList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(ileft, Symbol.Symbol.symbol(i), e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fieldCreateListAux ::= 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              Absyn.FieldExpList RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList fc = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fclaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fclaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList fcla = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fieldCreateList ::= 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              Absyn.FieldExpList RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList fc = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fclaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fclaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList fcla = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              Absyn.RecordExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fclleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fclright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList fcl = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordExp(ileft, Symbol.Symbol.symbol(i), fcl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arrCreate ::= ID LBRACK exp RBRACK OF exp 
            {
              Absyn.ArrayExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayExp(ileft, Symbol.Symbol.symbol(i), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // letExp ::= LET decList IN expList END 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.DecList e1 = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList e2 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.LetExp(e1left, (Absyn.DecList)e1, (Absyn.Exp)new Absyn.SeqExp(e1left, e2)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // forExp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Absyn.ForExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e0left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForExp(ileft, new Absyn.VarDec(ileft, Symbol.Symbol.symbol(i), null, e0), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(38/*forExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // whileExp ::= WHILE exp DO exp 
            {
              Absyn.WhileExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(e1left, (Absyn.Exp)e1, (Absyn.Exp)e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*whileExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ifThenElse ::= exp OR exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, new Absyn.IntExp(e1left, 1), e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(36/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ifThenElse ::= exp AND exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2, new Absyn.IntExp(e1left, 0)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(36/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ifThenElse ::= IF exp THEN exp ELSE exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2, e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(36/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ifThen ::= IF exp THEN exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*ifThen*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment ::= lValue ASSIGN exp 
            {
              Absyn.AssignExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var l = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(lleft, l, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expListAux ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expListAux ::= SEMICOLON exp expListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expList ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expList ::= exp expListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramListAux ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*paramListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramListAux ::= COMMA exp paramListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*paramListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramList ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*paramList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramList ::= exp paramListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*paramList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // callExp ::= ID LPAREN paramList RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // seqExpAux ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(33/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int sealeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int searight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList sea = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, sea); 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sealeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int searight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList sea = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ExpList(e, sea); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // seqExp ::= LPAREN RPAREN 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(32/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // infixExp ::= exp LE exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // infixExp ::= exp GE exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // infixExp ::= exp LT exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // infixExp ::= exp GT exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // infixExp ::= exp NEQ exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // infixExp ::= exp EQ exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // infixExp ::= exp DIVIDE exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // infixExp ::= exp TIMES exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // infixExp ::= exp MINUS exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // infixExp ::= exp PLUS exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // negation ::= MINUS exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, new Absyn.IntExp(e1left,0), Absyn.OpExp.MINUS, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(39/*negation*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= error exp 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= letExp 
            {
              Absyn.Exp RESULT = null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp le = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = le; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= BREAK 
            {
              Absyn.Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= forExp 
            {
              Absyn.Exp RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ForExp fe = (Absyn.ForExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fe; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= whileExp 
            {
              Absyn.Exp RESULT = null;
		int weleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.WhileExp we = (Absyn.WhileExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = we; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= ifThen 
            {
              Absyn.Exp RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp it = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = it; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= ifThenElse 
            {
              Absyn.Exp RESULT = null;
		int iteleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp ite = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ite; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= negation 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp n = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = n; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= assignment 
            {
              Absyn.Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.AssignExp a = (Absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = a; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= recCreate 
            {
              Absyn.Exp RESULT = null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.RecordExp rc = (Absyn.RecordExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = rc; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= arrCreate 
            {
              Absyn.Exp RESULT = null;
		int acleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ArrayExp ac = (Absyn.ArrayExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ac; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= infixExp 
            {
              Absyn.Exp RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.OpExp ie = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ie; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= callExp 
            {
              Absyn.Exp RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CallExp ce = (Absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ce; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= seqExp 
            {
              Absyn.Exp RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList se = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(seleft, se); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= STRING 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(sleft, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= INT 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(ileft, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= NIL 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NilExp(nleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= lValue 
            {
              Absyn.Exp RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var lv = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(lvleft, lv); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lValue ::= ID LBRACK exp RBRACK 
            {
              Absyn.Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(ileft, new Absyn.SimpleVar(ileft, Symbol.Symbol.symbol(i)), e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lValue ::= lValue LBRACK exp RBRACK 
            {
              Absyn.Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Var lv = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lvleft, lv, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lValue ::= lValue DOT ID 
            {
              Absyn.Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var lv = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldVar(lvleft, lv, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lValue ::= ID 
            {
              Absyn.Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(idleft, Symbol.Symbol.symbol(id)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              Absyn.VarDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(ileft, Symbol.Symbol.symbol(i), (Absyn.NameTy)t, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // varDec ::= VAR ID ASSIGN exp 
            {
              Absyn.VarDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(ileft, Symbol.Symbol.symbol(i), null, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primDec ::= PRIMITIVE ID LPAREN fieldDecList RPAREN COLON ID 
            {
              Absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.FieldList fdl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(ileft, Symbol.Symbol.symbol(i), fdl, new Absyn.NameTy(ileft, Symbol.Symbol.symbol(ty)), null /* no body */, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*primDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primDec ::= PRIMITIVE ID LPAREN fieldDecList RPAREN 
            {
              Absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fdl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.FunctionDec(ileft, Symbol.Symbol.symbol(i), fdl, null, null /* no body */, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*primDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
            {
              Absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.FieldList fdl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(ileft, Symbol.Symbol.symbol(i), fdl, new Absyn.NameTy(ileft, Symbol.Symbol.symbol(ty)), e1, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
            {
              Absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.FieldList fdl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(ileft, Symbol.Symbol.symbol(i), fdl, null, e1, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fieldDec ::= ID COLON ID 
            {
              Absyn.FieldList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(ileft, Symbol.Symbol.symbol(i), new Absyn.NameTy(tyleft, Symbol.Symbol.symbol(ty)), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldDecListAux ::= 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              Absyn.FieldList RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fd = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fdlaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdlaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList fdla = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(fdleft, fd.name, fd.typ, fdla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fieldDecList ::= 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              Absyn.FieldList RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fd = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fdlaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdlaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList fdla = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(fdleft, fd.name, fd.typ, fdla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              Absyn.RecordTy RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		  RESULT = new Absyn.RecordTy(flleft, fl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arrTy ::= ARRAY OF ID 
            {
              Absyn.ArrayTy RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayTy(ileft, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ty ::= arrTy 
            {
              Absyn.Ty RESULT = null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ArrayTy ar = (Absyn.ArrayTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ar; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ty ::= recTy 
            {
              Absyn.Ty RESULT = null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.RecordTy rt = (Absyn.RecordTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = rt; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ty ::= ID 
            {
              Absyn.Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(ileft, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tyDec ::= TYPE ID EQ ty 
            {
              Absyn.TypeDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(ileft, Symbol.Symbol.symbol(i), t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decList ::= 
            {
              Absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decList ::= dec decList 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.DecList dl = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, dl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec ::= primDecList 
            {
              Absyn.Dec RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec fd = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec ::= funcDecList 
            {
              Absyn.Dec RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec fd = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec ::= varDec 
            {
              Absyn.Dec RESULT = null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.VarDec vd = (Absyn.VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = vd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec ::= tyDecList 
            {
              Absyn.Dec RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec td = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = td; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primDecList ::= primDec primDecList 
            {
              Absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FunctionDec h = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec t = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(h.pos, h.name, h.params, h.result, null, t); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*primDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // primDecList ::= primDec 
            {
              Absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec h = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(h.pos, h.name, h.params, h.result, null, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*primDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcDecList ::= funcDec funcDecList 
            {
              Absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FunctionDec h = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec t = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, t); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*funcDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcDecList ::= funcDec 
            {
              Absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec h = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*funcDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tyDecList ::= tyDec tyDecList 
            {
              Absyn.TypeDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.TypeDec h = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(h.pos, h.name, h.ty, t);  
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*tyDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tyDecList ::= tyDec 
            {
              Absyn.TypeDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec h = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(h.pos, h.name, h.ty, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*tyDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decList 
            {
              Absyn.Absyn RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.DecList dl = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = dl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Absyn.Absyn RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Absyn start_val = (Absyn.Absyn)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

