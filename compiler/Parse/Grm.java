
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Oct 26 12:10:49 IST 2019
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Sat Oct 26 12:10:49 IST 2019
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\003\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\006" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\027\005\000\002\030\005\000\002\016\004\000\002" +
    "\016\002\000\002\017\005\000\002\017\002\000\002\015" +
    "\005\000\002\013\011\000\002\013\013\000\002\020\006" +
    "\000\002\020\010\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\032\006\000\002\033\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\035\004\000\002\035\006\000\002\036\005\000\002\036" +
    "\002\000\002\037\006\000\002\005\004\000\002\005\002" +
    "\000\002\006\005\000\002\006\002\000\002\026\005\000" +
    "\002\040\006\000\002\041\010\000\002\042\006\000\002" +
    "\043\012\000\002\007\007\000\002\010\004\000\002\010" +
    "\002\000\002\031\010\000\002\025\006\000\002\022\004" +
    "\000\002\022\002\000\002\023\005\000\002\023\002\000" +
    "\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\026\004\017\005\022\006\005\012\016\037" +
    "\012\042\007\043\034\046\030\052\024\053\015\001\002" +
    "\000\050\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015\uffe2\017" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\040\uffe2\041\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\001\002\000\050\002\uffe6\007\uffe6\011\uffe6\013\uffe6" +
    "\015\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\040" +
    "\uffe6\041\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\001\002\000\056\002\uffe8\007\uffe8\011" +
    "\uffe8\013\uffe8\014\206\015\uffe8\017\uffe8\020\207\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\035\210\040\uffe8\041\uffe8\044" +
    "\uffe8\045\uffe8\047\uffe8\050\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\001\002\000\026\004\017\005\022\006\005\012\016\037" +
    "\012\042\007\043\034\046\030\052\024\053\015\001\002" +
    "\000\050\002\uffe3\007\uffe3\011\uffe3\013\uffe3\015\uffe3\017" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\040\uffe3\041\uffe3" +
    "\044\uffe3\045\uffe3\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\001\002\000\014\002\000\021\042\022\043\023\045" +
    "\024\044\001\002\000\026\004\017\005\022\006\005\012" +
    "\016\037\012\042\007\043\034\046\030\052\024\053\015" +
    "\001\002\000\050\002\uffdc\007\uffdc\011\uffdc\013\uffdc\015" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\040\uffdc" +
    "\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\001\002\000\004\002\175\001\002\000\050" +
    "\002\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\040\uffe7\041\uffe7\044\uffe7" +
    "\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056\uffe7\001" +
    "\002\000\030\004\017\005\022\006\005\012\016\013\166" +
    "\037\012\042\007\043\034\046\030\052\024\053\015\001" +
    "\002\000\062\002\uffed\007\uffed\011\uffed\012\145\013\uffed" +
    "\014\144\015\uffed\016\143\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\035\uffed\040\uffed\041\uffed\044\uffed" +
    "\045\uffed\047\uffed\050\uffed\054\uffed\055\uffed\056\uffed\001" +
    "\002\000\050\002\uffd9\007\uffd9\011\uffd9\013\uffd9\015\uffd9" +
    "\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\040\uffd9\041" +
    "\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\001\002\000\050\002\uffde\007\uffde\011\uffde\013" +
    "\uffde\015\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\040\uffde\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde\054" +
    "\uffde\055\uffde\056\uffde\001\002\000\050\002\uffe5\007\uffe5" +
    "\011\uffe5\013\uffe5\015\uffe5\017\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047\uffe5" +
    "\050\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\050\002" +
    "\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\040\uffdb\041\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002" +
    "\000\050\002\uffda\007\uffda\011\uffda\013\uffda\015\uffda\017" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\040\uffda\041\uffda" +
    "\044\uffda\045\uffda\047\uffda\050\uffda\054\uffda\055\uffda\056" +
    "\uffda\001\002\000\050\002\uffe1\007\uffe1\011\uffe1\013\uffe1" +
    "\015\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\040" +
    "\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\001\002\000\056\002\uffeb\007\uffeb\011" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\035\uffeb\040\uffeb\041\uffeb\044" +
    "\uffeb\045\uffeb\047\uffeb\050\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\001\002\000\050\002\uffdf\007\uffdf\011\uffdf\013\uffdf\015" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\040\uffdf" +
    "\041\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\001\002\000\012\047\uffbe\054\062\055\055" +
    "\056\063\001\002\000\050\002\uffe0\007\uffe0\011\uffe0\013" +
    "\uffe0\015\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\056\002\uffec\007\uffec" +
    "\011\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\035\uffec\040\uffec\041\uffec" +
    "\044\uffec\045\uffec\047\uffec\050\uffec\054\uffec\055\uffec\056" +
    "\uffec\001\002\000\050\002\uffdd\007\uffdd\011\uffdd\013\uffdd" +
    "\015\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\040" +
    "\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\001\002\000\004\004\036\001\002\000" +
    "\050\002\uffe4\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\040\uffe4\041\uffe4\044" +
    "\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\001\002\000\004\035\037\001\002\000\026\004\017\005" +
    "\022\006\005\012\016\037\012\042\007\043\034\046\030" +
    "\052\024\053\015\001\002\000\014\021\042\022\043\023" +
    "\045\024\044\044\041\001\002\000\026\004\017\005\022" +
    "\006\005\012\016\037\012\042\007\043\034\046\030\052" +
    "\024\053\015\001\002\000\026\004\017\005\022\006\005" +
    "\012\016\037\012\042\007\043\034\046\030\052\024\053" +
    "\015\001\002\000\026\004\017\005\022\006\005\012\016" +
    "\037\012\042\007\043\034\046\030\052\024\053\015\001" +
    "\002\000\026\004\017\005\022\006\005\012\016\037\012" +
    "\042\007\043\034\046\030\052\024\053\015\001\002\000" +
    "\026\004\017\005\022\006\005\012\016\037\012\042\007" +
    "\043\034\046\030\052\024\053\015\001\002\000\050\002" +
    "\uffd6\007\uffd6\011\uffd6\013\uffd6\015\uffd6\017\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\040\uffd6\041\uffd6\044\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002" +
    "\000\050\002\uffd5\007\uffd5\011\uffd5\013\uffd5\015\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\040\uffd5\041\uffd5" +
    "\044\uffd5\045\uffd5\047\uffd5\050\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\001\002\000\050\002\uffd7\007\uffd7\011\uffd7\013\uffd7" +
    "\015\uffd7\017\uffd7\021\uffd7\022\uffd7\023\045\024\044\040" +
    "\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\001\002\000\050\002\uffd8\007\uffd8\011" +
    "\uffd8\013\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\023\045" +
    "\024\044\040\uffd8\041\uffd8\044\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000\014\021\042" +
    "\022\043\023\045\024\044\045\053\001\002\000\026\004" +
    "\017\005\022\006\005\012\016\037\012\042\007\043\034" +
    "\046\030\052\024\053\015\001\002\000\050\002\uffc1\007" +
    "\uffc1\011\uffc1\013\uffc1\015\uffc1\017\uffc1\021\042\022\043" +
    "\023\045\024\044\040\uffc1\041\uffc1\044\uffc1\045\uffc1\047" +
    "\uffc1\050\uffc1\054\uffc1\055\uffc1\056\uffc1\001\002\000\004" +
    "\004\134\001\002\000\004\047\124\001\002\000\012\047" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\012\047\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\001\002\000\012\047\uffff\054" +
    "\uffff\055\uffff\056\uffff\001\002\000\004\004\112\001\002" +
    "\000\004\004\066\001\002\000\012\047\uffbe\054\062\055" +
    "\055\056\063\001\002\000\004\047\uffbf\001\002\000\004" +
    "\025\067\001\002\000\010\004\071\016\072\036\075\001" +
    "\002\000\012\047\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002" +
    "\000\022\007\ufffb\013\ufffb\017\ufffb\035\ufffb\047\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\001\002\000\006\004\100\017\ufff5" +
    "\001\002\000\022\007\ufff9\013\ufff9\017\ufff9\035\ufff9\047" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000\022\007\ufffa" +
    "\013\ufffa\017\ufffa\035\ufffa\047\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\001\002\000\004\051\076\001\002\000\004\004\077" +
    "\001\002\000\022\007\ufff8\013\ufff8\017\ufff8\035\ufff8\047" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\004\010\110" +
    "\001\002\000\004\017\107\001\002\000\010\007\103\013" +
    "\ufff3\017\ufff3\001\002\000\004\004\100\001\002\000\006" +
    "\013\ufff6\017\ufff6\001\002\000\010\007\103\013\ufff3\017" +
    "\ufff3\001\002\000\006\013\ufff4\017\ufff4\001\002\000\022" +
    "\007\ufff7\013\ufff7\017\ufff7\035\ufff7\047\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\001\002\000\010\004\071\016\072\036\075" +
    "\001\002\000\010\007\ufff2\013\ufff2\017\ufff2\001\002\000" +
    "\004\012\113\001\002\000\006\004\100\013\ufff5\001\002" +
    "\000\004\013\115\001\002\000\006\010\117\025\116\001" +
    "\002\000\026\004\017\005\022\006\005\012\016\037\012" +
    "\042\007\043\034\046\030\052\024\053\015\001\002\000" +
    "\004\004\120\001\002\000\004\025\121\001\002\000\026" +
    "\004\017\005\022\006\005\012\016\037\012\042\007\043" +
    "\034\046\030\052\024\053\015\001\002\000\022\021\042" +
    "\022\043\023\045\024\044\047\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\001\002\000\022\021\042\022\043\023\045\024\044" +
    "\047\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002\000\030\004" +
    "\017\005\022\006\005\012\016\037\012\042\007\043\034" +
    "\046\030\050\uffc8\052\024\053\015\001\002\000\020\011" +
    "\131\013\uffc6\021\042\022\043\023\045\024\044\050\uffc6" +
    "\001\002\000\004\050\127\001\002\000\050\002\uffc0\007" +
    "\uffc0\011\uffc0\013\uffc0\015\uffc0\017\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\040\uffc0\041\uffc0\044\uffc0\045\uffc0\047" +
    "\uffc0\050\uffc0\054\uffc0\055\uffc0\056\uffc0\001\002\000\006" +
    "\013\uffc9\050\uffc9\001\002\000\026\004\017\005\022\006" +
    "\005\012\016\037\012\042\007\043\034\046\030\052\024" +
    "\053\015\001\002\000\020\011\131\013\uffc6\021\042\022" +
    "\043\023\045\024\044\050\uffc6\001\002\000\006\013\uffc7" +
    "\050\uffc7\001\002\000\006\010\135\035\136\001\002\000" +
    "\010\004\071\016\072\036\075\001\002\000\026\004\017" +
    "\005\022\006\005\012\016\037\012\042\007\043\034\046" +
    "\030\052\024\053\015\001\002\000\022\021\042\022\043" +
    "\023\045\024\044\047\uffef\054\uffef\055\uffef\056\uffef\001" +
    "\002\000\004\035\141\001\002\000\026\004\017\005\022" +
    "\006\005\012\016\037\012\042\007\043\034\046\030\052" +
    "\024\053\015\001\002\000\022\021\042\022\043\023\045" +
    "\024\044\047\uffee\054\uffee\055\uffee\056\uffee\001\002\000" +
    "\006\004\154\017\uffba\001\002\000\026\004\017\005\022" +
    "\006\005\012\016\037\012\042\007\043\034\046\030\052" +
    "\024\053\015\001\002\000\030\004\017\005\022\006\005" +
    "\012\016\013\uffc8\037\012\042\007\043\034\046\030\052" +
    "\024\053\015\001\002\000\004\013\147\001\002\000\050" +
    "\002\uffca\007\uffca\011\uffca\013\uffca\015\uffca\017\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\040\uffca\041\uffca\044\uffca" +
    "\045\uffca\047\uffca\050\uffca\054\uffca\055\uffca\056\uffca\001" +
    "\002\000\014\015\151\021\042\022\043\023\045\024\044" +
    "\001\002\000\004\051\152\001\002\000\026\004\017\005" +
    "\022\006\005\012\016\037\012\042\007\043\034\046\030" +
    "\052\024\053\015\001\002\000\050\002\uffbd\007\uffbd\011" +
    "\uffbd\013\uffbd\015\uffbd\017\uffbd\021\042\022\043\023\045" +
    "\024\044\040\uffbd\041\uffbd\044\uffbd\045\uffbd\047\uffbd\050" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\004\025\164" +
    "\001\002\000\004\017\163\001\002\000\006\007\157\017" +
    "\uffb8\001\002\000\004\004\154\001\002\000\004\017\uffbb" +
    "\001\002\000\006\007\157\017\uffb8\001\002\000\004\017" +
    "\uffb9\001\002\000\050\002\uffbc\007\uffbc\011\uffbc\013\uffbc" +
    "\015\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\040" +
    "\uffbc\041\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\001\002\000\026\004\017\005\022\006" +
    "\005\012\016\037\012\042\007\043\034\046\030\052\024" +
    "\053\015\001\002\000\016\007\uffb7\017\uffb7\021\042\022" +
    "\043\023\045\024\044\001\002\000\050\002\uffce\007\uffce" +
    "\011\uffce\013\uffce\015\uffce\017\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\040\uffce\041\uffce\044\uffce\045\uffce\047\uffce" +
    "\050\uffce\054\uffce\055\uffce\056\uffce\001\002\000\016\011" +
    "\170\013\uffcb\021\042\022\043\023\045\024\044\001\002" +
    "\000\026\004\017\005\022\006\005\012\016\037\012\042" +
    "\007\043\034\046\030\052\024\053\015\001\002\000\004" +
    "\013\172\001\002\000\050\002\uffcd\007\uffcd\011\uffcd\013" +
    "\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\040\uffcd\041\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\001\002\000\016\011\170\013\uffcb" +
    "\021\042\022\043\023\045\024\044\001\002\000\004\013" +
    "\uffcc\001\002\000\004\002\001\001\002\000\014\021\042" +
    "\022\043\023\045\024\044\040\177\001\002\000\026\004" +
    "\017\005\022\006\005\012\016\037\012\042\007\043\034" +
    "\046\030\052\024\053\015\001\002\000\050\002\uffc4\007" +
    "\uffc4\011\uffc4\013\uffc4\015\uffc4\017\uffc4\021\042\022\043" +
    "\023\045\024\044\040\uffc4\041\201\044\uffc4\045\uffc4\047" +
    "\uffc4\050\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\026" +
    "\004\017\005\022\006\005\012\016\037\012\042\007\043" +
    "\034\046\030\052\024\053\015\001\002\000\050\002\uffc3" +
    "\007\uffc3\011\uffc3\013\uffc3\015\uffc3\017\uffc3\021\042\022" +
    "\043\023\045\024\044\040\uffc3\041\uffc3\044\uffc3\045\uffc3" +
    "\047\uffc3\050\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000" +
    "\014\021\042\022\043\023\045\024\044\045\204\001\002" +
    "\000\026\004\017\005\022\006\005\012\016\037\012\042" +
    "\007\043\034\046\030\052\024\053\015\001\002\000\050" +
    "\002\uffc2\007\uffc2\011\uffc2\013\uffc2\015\uffc2\017\uffc2\021" +
    "\042\022\043\023\045\024\044\040\uffc2\041\uffc2\044\uffc2" +
    "\045\uffc2\047\uffc2\050\uffc2\054\uffc2\055\uffc2\056\uffc2\001" +
    "\002\000\026\004\017\005\022\006\005\012\016\037\012" +
    "\042\007\043\034\046\030\052\024\053\015\001\002\000" +
    "\004\004\212\001\002\000\026\004\017\005\022\006\005" +
    "\012\016\037\012\042\007\043\034\046\030\052\024\053" +
    "\015\001\002\000\050\002\uffc5\007\uffc5\011\uffc5\013\uffc5" +
    "\015\uffc5\017\uffc5\021\042\022\043\023\045\024\044\040" +
    "\uffc5\041\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\001\002\000\056\002\uffe9\007\uffe9\011" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\035\uffe9\040\uffe9\041\uffe9\044" +
    "\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\001\002\000\014\015\214\021\042\022\043\023\045\024" +
    "\044\001\002\000\056\002\uffea\007\uffea\011\uffea\013\uffea" +
    "\014\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\035\uffea\040\uffea\041\uffea\044\uffea\045\uffea" +
    "\047\uffea\050\uffea\054\uffea\055\uffea\056\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\042\003\013\004\010\007\017\021\005\025" +
    "\030\026\026\031\024\032\031\033\025\034\003\035\034" +
    "\037\007\040\032\041\020\042\012\043\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\202\007\017\021\005\025\030\026\026\031\024\032" +
    "\031\033\025\034\003\035\034\037\007\040\032\041\020" +
    "\042\012\043\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\175\007\017\021\005\025\030\026\026" +
    "\031\024\032\031\033\025\034\003\035\034\037\007\040" +
    "\032\041\020\042\012\043\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\166\007" +
    "\017\021\005\025\030\026\026\031\024\032\031\033\025" +
    "\034\003\035\034\037\007\040\032\041\020\042\012\043" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\055\011\063\012\057\013\056\020\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\037\007\017\021\005\025\030\026\026\031\024" +
    "\032\031\033\025\034\003\035\034\037\007\040\032\041" +
    "\020\042\012\043\022\001\001\000\002\001\001\000\040" +
    "\004\051\007\017\021\005\025\030\026\026\031\024\032" +
    "\031\033\025\034\003\035\034\037\007\040\032\041\020" +
    "\042\012\043\022\001\001\000\040\004\050\007\017\021" +
    "\005\025\030\026\026\031\024\032\031\033\025\034\003" +
    "\035\034\037\007\040\032\041\020\042\012\043\022\001" +
    "\001\000\040\004\047\007\017\021\005\025\030\026\026" +
    "\031\024\032\031\033\025\034\003\035\034\037\007\040" +
    "\032\041\020\042\012\043\022\001\001\000\040\004\046" +
    "\007\017\021\005\025\030\026\026\031\024\032\031\033" +
    "\025\034\003\035\034\037\007\040\032\041\020\042\012" +
    "\043\022\001\001\000\040\004\045\007\017\021\005\025" +
    "\030\026\026\031\024\032\031\033\025\034\003\035\034" +
    "\037\007\040\032\041\020\042\012\043\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\053\007\017\021" +
    "\005\025\030\026\026\031\024\032\031\033\025\034\003" +
    "\035\034\037\007\040\032\041\020\042\012\043\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\064\011\063" +
    "\012\057\013\056\020\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\067\027\072\030\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\101\016" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\103\001\001\000\004" +
    "\015\104\001\001\000\002\001\001\000\004\017\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\110" +
    "\027\072\030\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\101\016\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\122\007\017\021\005\025" +
    "\030\026\026\031\024\032\031\033\025\034\003\035\034" +
    "\037\007\040\032\041\020\042\012\043\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\121\007\017" +
    "\021\005\025\030\026\026\031\024\032\031\033\025\034" +
    "\003\035\034\037\007\040\032\041\020\042\012\043\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\124\005\125\007\017\021\005\025\030\026\026\031\024" +
    "\032\031\033\025\034\003\035\034\037\007\040\032\041" +
    "\020\042\012\043\022\001\001\000\004\006\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\131\007\017\021\005\025\030\026\026\031\024" +
    "\032\031\033\025\034\003\035\034\037\007\040\032\041" +
    "\020\042\012\043\022\001\001\000\004\006\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\137\027" +
    "\072\030\073\001\001\000\040\004\136\007\017\021\005" +
    "\025\030\026\026\031\024\032\031\033\025\034\003\035" +
    "\034\037\007\040\032\041\020\042\012\043\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\141\007" +
    "\017\021\005\025\030\026\026\031\024\032\031\033\025" +
    "\034\003\035\034\037\007\040\032\041\020\042\012\043" +
    "\022\001\001\000\002\001\001\000\006\022\154\024\155" +
    "\001\001\000\040\004\147\007\017\021\005\025\030\026" +
    "\026\031\024\032\031\033\025\034\003\035\034\037\007" +
    "\040\032\041\020\042\012\043\022\001\001\000\042\004" +
    "\124\005\145\007\017\021\005\025\030\026\026\031\024" +
    "\032\031\033\025\034\003\035\034\037\007\040\032\041" +
    "\020\042\012\043\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\152\007\017\021\005\025\030\026\026\031\024\032\031" +
    "\033\025\034\003\035\034\037\007\040\032\041\020\042" +
    "\012\043\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\157\001\001\000\004\024" +
    "\160\001\001\000\002\001\001\000\004\023\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\164\007" +
    "\017\021\005\025\030\026\026\031\024\032\031\033\025" +
    "\034\003\035\034\037\007\040\032\041\020\042\012\043" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\170\001\001\000\040\004\172\007\017\021\005\025" +
    "\030\026\026\031\024\032\031\033\025\034\003\035\034" +
    "\037\007\040\032\041\020\042\012\043\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\177\007\017\021\005\025\030\026\026\031\024" +
    "\032\031\033\025\034\003\035\034\037\007\040\032\041" +
    "\020\042\012\043\022\001\001\000\002\001\001\000\040" +
    "\004\201\007\017\021\005\025\030\026\026\031\024\032" +
    "\031\033\025\034\003\035\034\037\007\040\032\041\020" +
    "\042\012\043\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\204\007\017\021\005\025\030\026\026" +
    "\031\024\032\031\033\025\034\003\035\034\037\007\040" +
    "\032\041\020\042\012\043\022\001\001\000\002\001\001" +
    "\000\040\004\212\007\017\021\005\025\030\026\026\031" +
    "\024\032\031\033\025\034\003\035\034\037\007\040\032" +
    "\041\020\042\012\043\022\001\001\000\002\001\001\000" +
    "\040\004\210\007\017\021\005\025\030\026\026\031\024" +
    "\032\031\033\025\034\003\035\034\037\007\040\032\041" +
    "\020\042\012\043\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  //public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fieldCreate ::= ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fieldCreateListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fieldCreateList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arrCreate ::= ID LBRACK exp RBRACK OF exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decList ::= dec decList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // letExp ::= LET decList IN expList END 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // forExp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(33/*forExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // whileExp ::= WHILE exp DO exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(32/*whileExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifThenElse ::= IF exp THEN exp ELSE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ifThen ::= IF exp THEN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*ifThen*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment ::= lValue ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expListAux ::= SEMICOLON exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expList ::= exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // callExp ::= ID LPAREN expList RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // seqExpAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // seqExp ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binaryExp ::= exp OR exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*binaryExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binaryExp ::= exp AND exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*binaryExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binaryExp ::= exp GE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*binaryExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binaryExp ::= exp LE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*binaryExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binaryExp ::= exp GT exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*binaryExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binaryExp ::= exp LT exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*binaryExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // infixExp ::= exp DIVIDE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // infixExp ::= exp TIMES exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // infixExp ::= exp MINUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // infixExp ::= exp PLUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= letExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= BREAK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= forExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= whileExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= ifThen 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= ifThenElse 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= assignment 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= recCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= arrCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= infixExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= callExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= seqExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= STRING 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= INT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= NIL 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= lValue 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldExp ::= lValue DOT ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*fieldExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subscript ::= lValue LBRACK exp RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*subscript*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lValue ::= fieldExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lValue ::= subscript 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lValue ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDec ::= VAR ID ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fieldDec ::= ID COLON ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fieldDecListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fieldDecList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arrTy ::= ARRAY OF ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ty ::= arrTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ty ::= recTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ty ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tyDec ::= TYPE ID EQ ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= funcDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= tyDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec ::= varDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

