
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Sep 09 15:51:06 IST 2020
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Wed Sep 09 15:51:06 IST 2020
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\003\003\000\002\020" +
    "\003\000\002\020\004\000\002\016\003\000\002\016\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\012\004\000\002\012\002\000\002\017\006\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\005\000\002\023\005\000\002\025\004\000\002\025\002" +
    "\000\002\026\005\000\002\026\002\000\002\024\005\000" +
    "\002\015\011\000\002\015\013\000\002\014\006\000\002" +
    "\014\010\000\002\034\003\000\002\034\005\000\002\034" +
    "\006\000\002\034\006\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\047\004\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\040\004\000\002\040\006\000" +
    "\002\041\005\000\002\041\002\000\002\042\006\000\002" +
    "\007\004\000\002\007\002\000\002\010\005\000\002\010" +
    "\002\000\002\005\004\000\002\005\002\000\002\006\005" +
    "\000\002\006\002\000\002\030\005\000\002\043\006\000" +
    "\002\044\010\000\002\044\005\000\002\044\005\000\002" +
    "\045\006\000\002\046\012\000\002\011\007\000\002\035" +
    "\010\000\002\027\006\000\002\032\004\000\002\032\002" +
    "\000\002\033\005\000\002\033\002\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\032\003\031\004\020\005\023\006\005\012" +
    "\017\022\030\037\013\042\010\043\034\046\032\052\025" +
    "\053\016\001\002\000\070\002\uffdd\007\uffdd\011\uffdd\013" +
    "\uffdd\015\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\040\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd" +
    "\050\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000\070\002" +
    "\uffe1\007\uffe1\011\uffe1\013\uffe1\015\uffe1\017\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1" +
    "\044\uffe1\045\uffe1\047\uffe1\050\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\001\002\000\070\002\uffd9\007\uffd9\011\uffd9\013\uffd9" +
    "\015\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002\000\076\002\uffe3" +
    "\007\uffe3\011\uffe3\013\uffe3\014\242\015\uffe3\017\uffe3\020" +
    "\244\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\243\040\uffe3\041\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\001\002\000\032\003\031\004" +
    "\020\005\023\006\005\012\017\022\030\037\013\042\010" +
    "\043\034\046\032\052\025\053\016\001\002\000\070\002" +
    "\uffde\007\uffde\011\uffde\013\uffde\015\uffde\017\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\040\uffde\041\uffde" +
    "\044\uffde\045\uffde\047\uffde\050\uffde\054\uffde\055\uffde\056" +
    "\uffde\001\002\000\034\002\000\021\050\022\043\023\054" +
    "\024\044\025\051\026\047\027\055\030\052\031\053\032" +
    "\045\033\042\034\056\001\002\000\032\003\031\004\020" +
    "\005\023\006\005\012\017\022\030\037\013\042\010\043" +
    "\034\046\032\052\025\053\016\001\002\000\070\002\uffd6" +
    "\007\uffd6\011\uffd6\013\uffd6\015\uffd6\017\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\040\uffd6\041\uffd6\044" +
    "\uffd6\045\uffd6\047\uffd6\050\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\001\002\000\004\002\231\001\002\000\070\002\uffe2\007" +
    "\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\040\uffe2\041\uffe2\044\uffe2" +
    "\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2\056\uffe2\001" +
    "\002\000\034\003\031\004\020\005\023\006\005\012\017" +
    "\013\222\022\030\037\013\042\010\043\034\046\032\052" +
    "\025\053\016\001\002\000\102\002\uffe7\007\uffe7\011\uffe7" +
    "\012\174\013\uffe7\014\173\015\uffe7\016\172\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\001\002\000\070\002\uffd3\007" +
    "\uffd3\011\uffd3\013\uffd3\015\uffd3\017\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\040\uffd3\041\uffd3\044\uffd3" +
    "\045\uffd3\047\uffd3\050\uffd3\054\uffd3\055\uffd3\056\uffd3\001" +
    "\002\000\070\002\uffd8\007\uffd8\011\uffd8\013\uffd8\015\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\040\uffd8\041\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\001\002\000\070\002\uffe0\007\uffe0" +
    "\011\uffe0\013\uffe0\015\uffe0\017\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\040\uffe0\041\uffe0\044\uffe0\045" +
    "\uffe0\047\uffe0\050\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002" +
    "\000\070\002\uffd5\007\uffd5\011\uffd5\013\uffd5\015\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\040" +
    "\uffd5\041\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\001\002\000\070\002\uffd4\007\uffd4\011" +
    "\uffd4\013\uffd4\015\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000" +
    "\070\002\uffdc\007\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\040\uffdc" +
    "\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\001\002\000\070\002\uffda\007\uffda\011\uffda" +
    "\013\uffda\015\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\040\uffda\041\uffda\044\uffda\045\uffda\047" +
    "\uffda\050\uffda\054\uffda\055\uffda\056\uffda\001\002\000\032" +
    "\003\031\004\020\005\023\006\005\012\017\022\030\037" +
    "\013\042\010\043\034\046\032\052\025\053\016\001\002" +
    "\000\032\003\031\004\020\005\023\006\005\012\017\022" +
    "\030\037\013\042\010\043\034\046\032\052\025\053\016" +
    "\001\002\000\012\047\ufff7\054\107\055\102\056\104\001" +
    "\002\000\070\002\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\040\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\004\004\037\001\002" +
    "\000\070\002\uffd7\007\uffd7\011\uffd7\013\uffd7\015\uffd7\017" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\040" +
    "\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\001\002\000\070\002\uffdf\007\uffdf\011" +
    "\uffdf\013\uffdf\015\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf" +
    "\047\uffdf\050\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002\000" +
    "\004\035\040\001\002\000\032\003\031\004\020\005\023" +
    "\006\005\012\017\022\030\037\013\042\010\043\034\046" +
    "\032\052\025\053\016\001\002\000\034\021\050\022\043" +
    "\023\054\024\044\025\051\026\047\027\055\030\052\031" +
    "\053\032\045\033\042\034\056\044\046\001\002\000\032" +
    "\003\031\004\020\005\023\006\005\012\017\022\030\037" +
    "\013\042\010\043\034\046\032\052\025\053\016\001\002" +
    "\000\032\003\031\004\020\005\023\006\005\012\017\022" +
    "\030\037\013\042\010\043\034\046\032\052\025\053\016" +
    "\001\002\000\032\003\031\004\020\005\023\006\005\012" +
    "\017\022\030\037\013\042\010\043\034\046\032\052\025" +
    "\053\016\001\002\000\032\003\031\004\020\005\023\006" +
    "\005\012\017\022\030\037\013\042\010\043\034\046\032" +
    "\052\025\053\016\001\002\000\032\003\031\004\020\005" +
    "\023\006\005\012\017\022\030\037\013\042\010\043\034" +
    "\046\032\052\025\053\016\001\002\000\032\003\031\004" +
    "\020\005\023\006\005\012\017\022\030\037\013\042\010" +
    "\043\034\046\032\052\025\053\016\001\002\000\032\003" +
    "\031\004\020\005\023\006\005\012\017\022\030\037\013" +
    "\042\010\043\034\046\032\052\025\053\016\001\002\000" +
    "\032\003\031\004\020\005\023\006\005\012\017\022\030" +
    "\037\013\042\010\043\034\046\032\052\025\053\016\001" +
    "\002\000\032\003\031\004\020\005\023\006\005\012\017" +
    "\022\030\037\013\042\010\043\034\046\032\052\025\053" +
    "\016\001\002\000\032\003\031\004\020\005\023\006\005" +
    "\012\017\022\030\037\013\042\010\043\034\046\032\052" +
    "\025\053\016\001\002\000\032\003\031\004\020\005\023" +
    "\006\005\012\017\022\030\037\013\042\010\043\034\046" +
    "\032\052\025\053\016\001\002\000\032\003\031\004\020" +
    "\005\023\006\005\012\017\022\030\037\013\042\010\043" +
    "\034\046\032\052\025\053\016\001\002\000\032\003\031" +
    "\004\020\005\023\006\005\012\017\022\030\037\013\042" +
    "\010\043\034\046\032\052\025\053\016\001\002\000\070" +
    "\002\uffb5\007\uffb5\011\uffb5\013\uffb5\015\uffb5\017\uffb5\021" +
    "\050\022\043\023\054\024\044\025\051\026\047\027\055" +
    "\030\052\031\053\032\045\033\uffb5\034\uffb5\040\uffb5\041" +
    "\uffb5\044\uffb5\045\uffb5\047\uffb5\050\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\001\002\000\054\002\uffc9\007\uffc9\011\uffc9\013" +
    "\uffc9\015\uffc9\017\uffc9\021\050\022\043\023\054\024\044" +
    "\033\uffc9\034\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\047" +
    "\uffc9\050\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000\070" +
    "\002\uffce\007\uffce\011\uffce\013\uffce\015\uffce\017\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\040\uffce\041" +
    "\uffce\044\uffce\045\uffce\047\uffce\050\uffce\054\uffce\055\uffce" +
    "\056\uffce\001\002\000\054\002\uffca\007\uffca\011\uffca\013" +
    "\uffca\015\uffca\017\uffca\021\050\022\043\023\054\024\044" +
    "\033\uffca\034\uffca\040\uffca\041\uffca\044\uffca\045\uffca\047" +
    "\uffca\050\uffca\054\uffca\055\uffca\056\uffca\001\002\000\054" +
    "\002\uffc7\007\uffc7\011\uffc7\013\uffc7\015\uffc7\017\uffc7\021" +
    "\050\022\043\023\054\024\044\033\uffc7\034\uffc7\040\uffc7" +
    "\041\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\054\002\uffcc\007\uffcc\011\uffcc" +
    "\013\uffcc\015\uffcc\017\uffcc\021\050\022\043\023\054\024" +
    "\044\033\uffcc\034\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc" +
    "\047\uffcc\050\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000" +
    "\070\002\uffd0\007\uffd0\011\uffd0\013\uffd0\015\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\023\054\024\044\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\040\uffd0" +
    "\041\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\001\002\000\054\002\uffcb\007\uffcb\011\uffcb" +
    "\013\uffcb\015\uffcb\017\uffcb\021\050\022\043\023\054\024" +
    "\044\033\uffcb\034\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\050\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002\000" +
    "\034\021\050\022\043\023\054\024\044\025\051\026\047" +
    "\027\055\030\052\031\053\032\045\033\042\034\056\045" +
    "\070\001\002\000\032\003\031\004\020\005\023\006\005" +
    "\012\017\022\030\037\013\042\010\043\034\046\032\052" +
    "\025\053\016\001\002\000\070\002\uffb3\007\uffb3\011\uffb3" +
    "\013\uffb3\015\uffb3\017\uffb3\021\050\022\043\023\054\024" +
    "\044\025\051\026\047\027\055\030\052\031\053\032\045" +
    "\033\042\034\056\040\uffb3\041\uffb3\044\uffb3\045\uffb3\047" +
    "\uffb3\050\uffb3\054\uffb3\055\uffb3\056\uffb3\001\002\000\054" +
    "\002\uffc8\007\uffc8\011\uffc8\013\uffc8\015\uffc8\017\uffc8\021" +
    "\050\022\043\023\054\024\044\033\uffc8\034\uffc8\040\uffc8" +
    "\041\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\001\002\000\070\002\uffcd\007\uffcd\011\uffcd" +
    "\013\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\040\uffcd\041\uffcd\044\uffcd\045\uffcd\047" +
    "\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000\070" +
    "\002\uffcf\007\uffcf\011\uffcf\013\uffcf\015\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\023\054\024\044\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\040\uffcf\041" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\001\002\000\070\002\uffb6\007\uffb6\011\uffb6\013" +
    "\uffb6\015\uffb6\017\uffb6\021\050\022\043\023\054\024\044" +
    "\025\051\026\047\027\055\030\052\031\053\032\045\033" +
    "\uffb6\034\uffb6\040\uffb6\041\uffb6\044\uffb6\045\uffb6\047\uffb6" +
    "\050\uffb6\054\uffb6\055\uffb6\056\uffb6\001\002\000\012\047" +
    "\ufffd\054\107\055\ufffd\056\ufffd\001\002\000\012\047\ufff7" +
    "\054\107\055\102\056\104\001\002\000\012\047\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\001\002\000\012\047\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\001\002\000\004\004\157\001\002\000" +
    "\004\047\147\001\002\000\004\004\133\001\002\000\012" +
    "\047\uffff\054\uffff\055\uffff\056\104\001\002\000\012\047" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\004\004\110" +
    "\001\002\000\004\012\111\001\002\000\006\004\112\013" +
    "\uffef\001\002\000\004\010\130\001\002\000\004\013\121" +
    "\001\002\000\010\007\115\013\uffed\017\uffed\001\002\000" +
    "\004\004\112\001\002\000\006\013\ufff0\017\ufff0\001\002" +
    "\000\010\007\115\013\uffed\017\uffed\001\002\000\006\013" +
    "\uffee\017\uffee\001\002\000\006\010\123\025\122\001\002" +
    "\000\032\003\031\004\020\005\023\006\005\012\017\022" +
    "\030\037\013\042\010\043\034\046\032\052\025\053\016" +
    "\001\002\000\004\004\124\001\002\000\004\025\125\001" +
    "\002\000\032\003\031\004\020\005\023\006\005\012\017" +
    "\022\030\037\013\042\010\043\034\046\032\052\025\053" +
    "\016\001\002\000\042\021\050\022\043\023\054\024\044" +
    "\025\051\026\047\027\055\030\052\031\053\032\045\033" +
    "\042\034\056\047\uffea\054\uffea\055\uffea\056\uffea\001\002" +
    "\000\042\021\050\022\043\023\054\024\044\025\051\026" +
    "\047\027\055\030\052\031\053\032\045\033\042\034\056" +
    "\047\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\004\004" +
    "\131\001\002\000\010\007\uffec\013\uffec\017\uffec\001\002" +
    "\000\012\047\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000" +
    "\004\025\134\001\002\000\010\004\136\016\137\036\142" +
    "\001\002\000\012\047\ufff6\054\ufff6\055\ufff6\056\ufff6\001" +
    "\002\000\014\035\ufff5\047\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\001\002\000\006\004\112\017\uffef\001\002\000\014\035" +
    "\ufff3\047\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\014" +
    "\035\ufff4\047\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000" +
    "\004\051\143\001\002\000\004\004\144\001\002\000\014" +
    "\035\ufff2\047\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000" +
    "\004\017\146\001\002\000\014\035\ufff1\047\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\001\002\000\034\003\031\004\020\005" +
    "\023\006\005\012\017\022\030\037\013\042\010\043\034" +
    "\046\032\050\uffbc\052\025\053\016\001\002\000\036\011" +
    "\154\021\050\022\043\023\054\024\044\025\051\026\047" +
    "\027\055\030\052\031\053\032\045\033\042\034\056\050" +
    "\uffba\001\002\000\004\050\152\001\002\000\070\002\uffb2" +
    "\007\uffb2\011\uffb2\013\uffb2\015\uffb2\017\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\040\uffb2\041\uffb2\044" +
    "\uffb2\045\uffb2\047\uffb2\050\uffb2\054\uffb2\055\uffb2\056\uffb2" +
    "\001\002\000\004\050\uffbd\001\002\000\032\003\031\004" +
    "\020\005\023\006\005\012\017\022\030\037\013\042\010" +
    "\043\034\046\032\052\025\053\016\001\002\000\036\011" +
    "\154\021\050\022\043\023\054\024\044\025\051\026\047" +
    "\027\055\030\052\031\053\032\045\033\042\034\056\050" +
    "\uffba\001\002\000\004\050\uffbb\001\002\000\006\010\160" +
    "\035\161\001\002\000\010\004\136\016\137\036\142\001" +
    "\002\000\032\003\031\004\020\005\023\006\005\012\017" +
    "\022\030\037\013\042\010\043\034\046\032\052\025\053" +
    "\016\001\002\000\042\021\050\022\043\023\054\024\044" +
    "\025\051\026\047\027\055\030\052\031\053\032\045\033" +
    "\042\034\056\047\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002" +
    "\000\004\035\164\001\002\000\032\003\031\004\020\005" +
    "\023\006\005\012\017\022\030\037\013\042\010\043\034" +
    "\046\032\052\025\053\016\001\002\000\042\021\050\022" +
    "\043\023\054\024\044\025\051\026\047\027\055\030\052" +
    "\031\053\032\045\033\042\034\056\047\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\001\002\000\004\047\ufff8\001\002\000\012" +
    "\047\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000\070\002" +
    "\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2\017\uffd2\021\050" +
    "\022\043\023\054\024\044\025\051\026\047\027\055\030" +
    "\052\031\053\032\045\033\042\034\056\040\uffd2\041\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\050\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\001\002\000\070\002\uffd1\007\uffd1\011\uffd1\013\uffd1" +
    "\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023\054\024\044\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1\047\uffd1\050" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\006\004\210" +
    "\017\uffae\001\002\000\032\003\031\004\020\005\023\006" +
    "\005\012\017\022\030\037\013\042\010\043\034\046\032" +
    "\052\025\053\016\001\002\000\034\003\031\004\020\005" +
    "\023\006\005\012\017\013\uffc0\022\030\037\013\042\010" +
    "\043\034\046\032\052\025\053\016\001\002\000\004\013" +
    "\203\001\002\000\036\007\200\013\uffbe\021\050\022\043" +
    "\023\054\024\044\025\051\026\047\027\055\030\052\031" +
    "\053\032\045\033\042\034\056\001\002\000\004\013\uffc1" +
    "\001\002\000\032\003\031\004\020\005\023\006\005\012" +
    "\017\022\030\037\013\042\010\043\034\046\032\052\025" +
    "\053\016\001\002\000\036\007\200\013\uffbe\021\050\022" +
    "\043\023\054\024\044\025\051\026\047\027\055\030\052" +
    "\031\053\032\045\033\042\034\056\001\002\000\004\013" +
    "\uffbf\001\002\000\070\002\uffc2\007\uffc2\011\uffc2\013\uffc2" +
    "\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\040\uffc2\041\uffc2\044\uffc2\045\uffc2\047\uffc2\050" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\001\002\000\034\015\205" +
    "\021\050\022\043\023\054\024\044\025\051\026\047\027" +
    "\055\030\052\031\053\032\045\033\042\034\056\001\002" +
    "\000\100\002\uffe4\007\uffe4\011\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4" +
    "\047\uffe4\050\uffe4\051\206\054\uffe4\055\uffe4\056\uffe4\001" +
    "\002\000\032\003\031\004\020\005\023\006\005\012\017" +
    "\022\030\037\013\042\010\043\034\046\032\052\025\053" +
    "\016\001\002\000\070\002\uffb1\007\uffb1\011\uffb1\013\uffb1" +
    "\015\uffb1\017\uffb1\021\050\022\043\023\054\024\044\025" +
    "\051\026\047\027\055\030\052\031\053\032\045\033\042" +
    "\034\056\040\uffb1\041\uffb1\044\uffb1\045\uffb1\047\uffb1\050" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002\000\004\025\220" +
    "\001\002\000\004\017\217\001\002\000\006\007\213\017" +
    "\uffac\001\002\000\004\004\210\001\002\000\004\017\uffaf" +
    "\001\002\000\006\007\213\017\uffac\001\002\000\004\017" +
    "\uffad\001\002\000\070\002\uffb0\007\uffb0\011\uffb0\013\uffb0" +
    "\015\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\040\uffb0\041\uffb0\044\uffb0\045\uffb0\047\uffb0\050" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002\000\032\003\031" +
    "\004\020\005\023\006\005\012\017\022\030\037\013\042" +
    "\010\043\034\046\032\052\025\053\016\001\002\000\036" +
    "\007\uffab\017\uffab\021\050\022\043\023\054\024\044\025" +
    "\051\026\047\027\055\030\052\031\053\032\045\033\042" +
    "\034\056\001\002\000\070\002\uffc6\007\uffc6\011\uffc6\013" +
    "\uffc6\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6\047\uffc6" +
    "\050\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\036\011" +
    "\225\013\uffc3\021\050\022\043\023\054\024\044\025\051" +
    "\026\047\027\055\030\052\031\053\032\045\033\042\034" +
    "\056\001\002\000\004\013\230\001\002\000\032\003\031" +
    "\004\020\005\023\006\005\012\017\022\030\037\013\042" +
    "\010\043\034\046\032\052\025\053\016\001\002\000\036" +
    "\011\225\013\uffc3\021\050\022\043\023\054\024\044\025" +
    "\051\026\047\027\055\030\052\031\053\032\045\033\042" +
    "\034\056\001\002\000\004\013\uffc4\001\002\000\070\002" +
    "\uffc5\007\uffc5\011\uffc5\013\uffc5\015\uffc5\017\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\040\uffc5\041\uffc5" +
    "\044\uffc5\045\uffc5\047\uffc5\050\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\001\002\000\004\002\001\001\002\000\034\021\050" +
    "\022\043\023\054\024\044\025\051\026\047\027\055\030" +
    "\052\031\053\032\045\033\042\034\056\040\233\001\002" +
    "\000\032\003\031\004\020\005\023\006\005\012\017\022" +
    "\030\037\013\042\010\043\034\046\032\052\025\053\016" +
    "\001\002\000\070\002\uffb8\007\uffb8\011\uffb8\013\uffb8\015" +
    "\uffb8\017\uffb8\021\050\022\043\023\054\024\044\025\051" +
    "\026\047\027\055\030\052\031\053\032\045\033\042\034" +
    "\056\040\uffb8\041\235\044\uffb8\045\uffb8\047\uffb8\050\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\001\002\000\032\003\031\004" +
    "\020\005\023\006\005\012\017\022\030\037\013\042\010" +
    "\043\034\046\032\052\025\053\016\001\002\000\070\002" +
    "\uffb7\007\uffb7\011\uffb7\013\uffb7\015\uffb7\017\uffb7\021\050" +
    "\022\043\023\054\024\044\025\051\026\047\027\055\030" +
    "\052\031\053\032\045\033\042\034\056\040\uffb7\041\uffb7" +
    "\044\uffb7\045\uffb7\047\uffb7\050\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\001\002\000\034\021\050\022\043\023\054\024\044" +
    "\025\051\026\047\027\055\030\052\031\053\032\045\033" +
    "\042\034\056\045\240\001\002\000\032\003\031\004\020" +
    "\005\023\006\005\012\017\022\030\037\013\042\010\043" +
    "\034\046\032\052\025\053\016\001\002\000\070\002\uffb4" +
    "\007\uffb4\011\uffb4\013\uffb4\015\uffb4\017\uffb4\021\050\022" +
    "\043\023\054\024\044\025\051\026\047\027\055\030\052" +
    "\031\053\032\045\033\042\034\056\040\uffb4\041\uffb4\044" +
    "\uffb4\045\uffb4\047\uffb4\050\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\001\002\000\032\003\031\004\020\005\023\006\005\012" +
    "\017\022\030\037\013\042\010\043\034\046\032\052\025" +
    "\053\016\001\002\000\032\003\031\004\020\005\023\006" +
    "\005\012\017\022\030\037\013\042\010\043\034\046\032" +
    "\052\025\053\016\001\002\000\004\004\245\001\002\000" +
    "\076\002\uffe6\007\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6\047" +
    "\uffe6\050\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\070" +
    "\002\uffb9\007\uffb9\011\uffb9\013\uffb9\015\uffb9\017\uffb9\021" +
    "\050\022\043\023\054\024\044\025\051\026\047\027\055" +
    "\030\052\031\053\032\045\033\042\034\056\040\uffb9\041" +
    "\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\001\002\000\034\015\250\021\050\022\043\023" +
    "\054\024\044\025\051\026\047\027\055\030\052\031\053" +
    "\032\045\033\042\034\056\001\002\000\076\002\uffe5\007" +
    "\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\040\003\014\004\011\011\020\027\032\030" +
    "\026\034\006\035\025\037\003\040\035\042\010\043\034" +
    "\044\021\045\013\046\023\047\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\236\011\020\027\032\030\026\034\006\035" +
    "\025\037\003\040\035\042\010\043\034\044\021\045\013" +
    "\046\023\047\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\231\011\020\027\032\030\026\034\006" +
    "\035\025\037\003\040\035\042\010\043\034\044\021\045" +
    "\013\046\023\047\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\222\011\020\027" +
    "\032\030\026\034\006\035\025\037\003\040\035\042\010" +
    "\043\034\044\021\045\013\046\023\047\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\170\011\020\027\032" +
    "\030\026\034\006\035\025\037\003\040\035\042\010\043" +
    "\034\044\021\045\013\046\023\047\005\001\001\000\036" +
    "\004\167\011\020\027\032\030\026\034\006\035\025\037" +
    "\003\040\035\042\010\043\034\044\021\045\013\046\023" +
    "\047\005\001\001\000\020\012\102\013\076\014\077\015" +
    "\075\016\100\017\104\020\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\040\011\020\027\032\030\026" +
    "\034\006\035\025\037\003\040\035\042\010\043\034\044" +
    "\021\045\013\046\023\047\005\001\001\000\002\001\001" +
    "\000\036\004\074\011\020\027\032\030\026\034\006\035" +
    "\025\037\003\040\035\042\010\043\034\044\021\045\013" +
    "\046\023\047\005\001\001\000\036\004\073\011\020\027" +
    "\032\030\026\034\006\035\025\037\003\040\035\042\010" +
    "\043\034\044\021\045\013\046\023\047\005\001\001\000" +
    "\036\004\072\011\020\027\032\030\026\034\006\035\025" +
    "\037\003\040\035\042\010\043\034\044\021\045\013\046" +
    "\023\047\005\001\001\000\036\004\071\011\020\027\032" +
    "\030\026\034\006\035\025\037\003\040\035\042\010\043" +
    "\034\044\021\045\013\046\023\047\005\001\001\000\036" +
    "\004\066\011\020\027\032\030\026\034\006\035\025\037" +
    "\003\040\035\042\010\043\034\044\021\045\013\046\023" +
    "\047\005\001\001\000\036\004\065\011\020\027\032\030" +
    "\026\034\006\035\025\037\003\040\035\042\010\043\034" +
    "\044\021\045\013\046\023\047\005\001\001\000\036\004" +
    "\064\011\020\027\032\030\026\034\006\035\025\037\003" +
    "\040\035\042\010\043\034\044\021\045\013\046\023\047" +
    "\005\001\001\000\036\004\063\011\020\027\032\030\026" +
    "\034\006\035\025\037\003\040\035\042\010\043\034\044" +
    "\021\045\013\046\023\047\005\001\001\000\036\004\062" +
    "\011\020\027\032\030\026\034\006\035\025\037\003\040" +
    "\035\042\010\043\034\044\021\045\013\046\023\047\005" +
    "\001\001\000\036\004\061\011\020\027\032\030\026\034" +
    "\006\035\025\037\003\040\035\042\010\043\034\044\021" +
    "\045\013\046\023\047\005\001\001\000\036\004\060\011" +
    "\020\027\032\030\026\034\006\035\025\037\003\040\035" +
    "\042\010\043\034\044\021\045\013\046\023\047\005\001" +
    "\001\000\036\004\057\011\020\027\032\030\026\034\006" +
    "\035\025\037\003\040\035\042\010\043\034\044\021\045" +
    "\013\046\023\047\005\001\001\000\036\004\056\011\020" +
    "\027\032\030\026\034\006\035\025\037\003\040\035\042" +
    "\010\043\034\044\021\045\013\046\023\047\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\070\011\020\027\032\030\026\034\006\035\025\037\003" +
    "\040\035\042\010\043\034\044\021\045\013\046\023\047" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\075\016\166\001\001\000\020\012\165\013\076\014\077" +
    "\015\075\016\100\017\104\020\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\104\020\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\113\025\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\115\001\001\000\004\024\116\001\001" +
    "\000\002\001\001\000\004\026\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\126\011\020\027\032" +
    "\030\026\034\006\035\025\037\003\040\035\042\010\043" +
    "\034\044\021\045\013\046\023\047\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\125\011\020\027" +
    "\032\030\026\034\006\035\025\037\003\040\035\042\010" +
    "\043\034\044\021\045\013\046\023\047\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\134\022\137\023\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\113\025\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\147\005\150\011\020\027\032\030\026\034\006" +
    "\035\025\037\003\040\035\042\010\043\034\044\021\045" +
    "\013\046\023\047\005\001\001\000\004\006\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\154\011\020\027\032\030\026\034\006\035\025" +
    "\037\003\040\035\042\010\043\034\044\021\045\013\046" +
    "\023\047\005\001\001\000\004\006\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\162\022\137\023" +
    "\140\001\001\000\036\004\161\011\020\027\032\030\026" +
    "\034\006\035\025\037\003\040\035\042\010\043\034\044" +
    "\021\045\013\046\023\047\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\164\011\020\027\032\030" +
    "\026\034\006\035\025\037\003\040\035\042\010\043\034" +
    "\044\021\045\013\046\023\047\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\211\032\210\001\001\000" +
    "\036\004\203\011\020\027\032\030\026\034\006\035\025" +
    "\037\003\040\035\042\010\043\034\044\021\045\013\046" +
    "\023\047\005\001\001\000\040\004\175\007\174\011\020" +
    "\027\032\030\026\034\006\035\025\037\003\040\035\042" +
    "\010\043\034\044\021\045\013\046\023\047\005\001\001" +
    "\000\002\001\001\000\004\010\176\001\001\000\002\001" +
    "\001\000\036\004\200\011\020\027\032\030\026\034\006" +
    "\035\025\037\003\040\035\042\010\043\034\044\021\045" +
    "\013\046\023\047\005\001\001\000\004\010\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\206\011\020\027\032\030\026" +
    "\034\006\035\025\037\003\040\035\042\010\043\034\044" +
    "\021\045\013\046\023\047\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\213\001" +
    "\001\000\004\031\214\001\001\000\002\001\001\000\004" +
    "\033\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\220\011\020\027\032\030\026\034\006\035\025" +
    "\037\003\040\035\042\010\043\034\044\021\045\013\046" +
    "\023\047\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\223\001\001\000\002\001\001\000\036\004" +
    "\225\011\020\027\032\030\026\034\006\035\025\037\003" +
    "\040\035\042\010\043\034\044\021\045\013\046\023\047" +
    "\005\001\001\000\004\041\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\233\011\020\027\032\030\026\034\006\035\025" +
    "\037\003\040\035\042\010\043\034\044\021\045\013\046" +
    "\023\047\005\001\001\000\002\001\001\000\036\004\235" +
    "\011\020\027\032\030\026\034\006\035\025\037\003\040" +
    "\035\042\010\043\034\044\021\045\013\046\023\047\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\240\011\020\027\032\030\026\034\006\035\025\037\003" +
    "\040\035\042\010\043\034\044\021\045\013\046\023\047" +
    "\005\001\001\000\002\001\001\000\036\004\246\011\020" +
    "\027\032\030\026\034\006\035\025\037\003\040\035\042" +
    "\010\043\034\044\021\045\013\046\023\047\005\001\001" +
    "\000\036\004\245\011\020\027\032\030\026\034\006\035" +
    "\025\037\003\040\035\042\010\043\034\044\021\045\013" +
    "\046\023\047\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Absyn.Exp parseResult;
  ErrorMsg.ErrorMsg errorMsg;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current.left, "CUP: Syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void unrecovered_syntax_error(java_cup.runtime.Symbol current) {
      errorMsg.error(current != null ? current.left : 0, "CUP: Unrecovered syntax error, unexpected '"  + Const.symnames[current.sym] + "'");
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public void report_fatal_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 
  static Symbol.Symbol sym(String s) {
	  return Symbol.Symbol.symbol(s);
	}

  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // fieldCreate ::= ID EQ exp 
            {
              Absyn.FieldExpList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(ileft, Symbol.Symbol.symbol(i), e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fieldCreateListAux ::= 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              Absyn.FieldExpList RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList fc = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fclaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fclaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList fcla = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // fieldCreateList ::= 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              Absyn.FieldExpList RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList fc = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fclaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fclaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList fcla = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(fcleft, fc.name, fc.init, fcla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              Absyn.RecordExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fclleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fclright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList fcl = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordExp(ileft, Symbol.Symbol.symbol(i), fcl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arrCreate ::= ID LBRACK exp RBRACK OF exp 
            {
              Absyn.ArrayExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayExp(ileft, Symbol.Symbol.symbol(i), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // letExp ::= LET decList IN expList END 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.DecList e1 = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList e2 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.LetExp(e1left, (Absyn.DecList)e1, (Absyn.Exp)new Absyn.SeqExp(e1left, e2)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forExp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Absyn.ForExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e0left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e0 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForExp(ileft, new Absyn.VarDec(ileft, Symbol.Symbol.symbol(i), null, e0), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(36/*forExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // whileExp ::= WHILE exp DO exp 
            {
              Absyn.WhileExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(e1left, (Absyn.Exp)e1, (Absyn.Exp)e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*whileExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ifThenElse ::= exp OR exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, new Absyn.IntExp(e1left, 1), e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifThenElse ::= exp AND exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2, new Absyn.IntExp(e1left, 0)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifThenElse ::= IF exp THEN exp ELSE exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2, e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ifThen ::= IF exp THEN exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*ifThen*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment ::= lValue ASSIGN exp 
            {
              Absyn.AssignExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var l = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(lleft, l, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expListAux ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expListAux ::= SEMICOLON exp expListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expList ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expList ::= exp expListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramListAux ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*paramListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramListAux ::= COMMA exp paramListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*paramListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramList ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*paramList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramList ::= exp paramListAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, a); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*paramList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // callExp ::= ID LPAREN paramList RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList el = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(ileft, Symbol.Symbol.symbol(i), el); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // seqExpAux ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int sealeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int searight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList sea = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, sea); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sealeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int searight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList sea = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ExpList(e, sea); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // seqExp ::= LPAREN RPAREN 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // infixExp ::= exp LE exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // infixExp ::= exp GE exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // infixExp ::= exp LT exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // infixExp ::= exp GT exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // infixExp ::= exp NEQ exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // infixExp ::= exp EQ exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // infixExp ::= exp DIVIDE exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // infixExp ::= exp TIMES exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // infixExp ::= exp MINUS exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // infixExp ::= exp PLUS exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // negation ::= MINUS exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, new Absyn.IntExp(e1left,0), Absyn.OpExp.MINUS, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(37/*negation*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= error exp 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= letExp 
            {
              Absyn.Exp RESULT = null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp le = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = le; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= BREAK 
            {
              Absyn.Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= forExp 
            {
              Absyn.Exp RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ForExp fe = (Absyn.ForExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fe; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= whileExp 
            {
              Absyn.Exp RESULT = null;
		int weleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.WhileExp we = (Absyn.WhileExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = we; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= ifThen 
            {
              Absyn.Exp RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp it = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = it; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= ifThenElse 
            {
              Absyn.Exp RESULT = null;
		int iteleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp ite = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ite; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= negation 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp n = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = n; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= assignment 
            {
              Absyn.Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.AssignExp a = (Absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = a; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= recCreate 
            {
              Absyn.Exp RESULT = null;
		int rcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.RecordExp rc = (Absyn.RecordExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = rc; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= arrCreate 
            {
              Absyn.Exp RESULT = null;
		int acleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ArrayExp ac = (Absyn.ArrayExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ac; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= infixExp 
            {
              Absyn.Exp RESULT = null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.OpExp ie = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ie; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= callExp 
            {
              Absyn.Exp RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CallExp ce = (Absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ce; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= seqExp 
            {
              Absyn.Exp RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList se = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(seleft, se); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= STRING 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(sleft, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= INT 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(ileft, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= NIL 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NilExp(nleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= lValue 
            {
              Absyn.Exp RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var lv = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(lvleft, lv); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lValue ::= ID LBRACK exp RBRACK 
            {
              Absyn.Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(ileft, new Absyn.SimpleVar(ileft, Symbol.Symbol.symbol(i)), e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lValue ::= lValue LBRACK exp RBRACK 
            {
              Absyn.Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Var lv = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lvleft, lv, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lValue ::= lValue DOT ID 
            {
              Absyn.Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var lv = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldVar(lvleft, lv, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lValue ::= ID 
            {
              Absyn.Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(idleft, Symbol.Symbol.symbol(id)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              Absyn.VarDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(ileft, Symbol.Symbol.symbol(i), (Absyn.NameTy)t, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // varDec ::= VAR ID ASSIGN exp 
            {
              Absyn.VarDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(ileft, Symbol.Symbol.symbol(i), null, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
            {
              Absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.FieldList fdl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(ileft, Symbol.Symbol.symbol(i), fdl, new Absyn.NameTy(ileft, Symbol.Symbol.symbol(ty)), e1, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
            {
              Absyn.FunctionDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.FieldList fdl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(ileft, Symbol.Symbol.symbol(i), fdl, null, e1, null ); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fieldDec ::= ID COLON ID 
            {
              Absyn.FieldList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(ileft, Symbol.Symbol.symbol(i), Symbol.Symbol.symbol(ty), null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fieldDecListAux ::= 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              Absyn.FieldList RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fd = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fdlaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdlaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList fdla = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(fdleft, fd.name, fd.typ, fdla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fieldDecList ::= 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              Absyn.FieldList RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fd = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fdlaleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdlaright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList fdla = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(fdleft, fd.name, fd.typ, fdla); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              Absyn.RecordTy RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		  RESULT = new Absyn.RecordTy(flleft, fl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arrTy ::= ARRAY OF ID 
            {
              Absyn.ArrayTy RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayTy(ileft, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ty ::= arrTy 
            {
              Absyn.Ty RESULT = null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ArrayTy ar = (Absyn.ArrayTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = ar; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ty ::= recTy 
            {
              Absyn.Ty RESULT = null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.RecordTy rt = (Absyn.RecordTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = rt; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ty ::= ID 
            {
              Absyn.Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(ileft, Symbol.Symbol.symbol(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tyDec ::= TYPE ID EQ ty 
            {
              Absyn.TypeDec RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(ileft, Symbol.Symbol.symbol(i), t, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decList ::= 
            {
              Absyn.DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decList ::= dec decList 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.DecList dl = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 
/*
if(d instanceof Absyn.FunctionDec && dl != null && dl.head != null && dl.head instanceof Absyn.FunctionDec ){
  ((Absyn.FunctionDec)d).next = ((Absyn.FunctionDec)dl.head);
}
if(d instanceof Absyn.TypeDec && dl != null && dl.head != null && dl.head instanceof Absyn.TypeDec ){
  ((Absyn.TypeDec)d).next = ((Absyn.TypeDec)dl.head);
}
*/
RESULT = new Absyn.DecList(d, dl); 

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec ::= funcDecList 
            {
              Absyn.Dec RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec fd = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= varDec 
            {
              Absyn.Dec RESULT = null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.VarDec vd = (Absyn.VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = vd; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= tyDecList 
            {
              Absyn.Dec RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec td = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = td; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcDecList ::= funcDec funcDecList 
            {
              Absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FunctionDec h = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec t = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, t); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*funcDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcDecList ::= funcDec 
            {
              Absyn.FunctionDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec h = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(h.pos, h.name, h.params, h.result, h.body, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*funcDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tyDecList ::= tyDec tyDecList 
            {
              Absyn.TypeDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.TypeDec h = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(h.pos, h.name, h.ty, t);  
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*tyDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tyDecList ::= tyDec 
            {
              Absyn.TypeDec RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec h = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(h.pos, h.name, h.ty, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*tyDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Program RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Program(e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

