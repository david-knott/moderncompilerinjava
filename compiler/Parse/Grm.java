
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Oct 23 19:42:25 IST 2019
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Wed Oct 23 19:42:25 IST 2019
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\003\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\006" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\030\005\000\002\031\005\000\002\016\004\000\002" +
    "\016\002\000\002\017\005\000\002\017\002\000\002\015" +
    "\005\000\002\013\011\000\002\013\013\000\002\021\006" +
    "\000\002\021\010\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\033\006\000\002\034\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\035\003\000\002\035\005\000\002\035\005\000\002\036" +
    "\004\000\002\036\006\000\002\037\005\000\002\037\002" +
    "\000\002\040\006\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\006\002\000\002\027\005\000\002" +
    "\041\006\000\002\042\010\000\002\043\006\000\002\044" +
    "\012\000\002\007\007\000\002\010\004\000\002\010\002" +
    "\000\002\032\010\000\002\026\006\000\002\023\004\000" +
    "\002\023\002\000\002\024\005\000\002\024\002\000\002" +
    "\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\022\004\016\005\021\006\005\012\015\037" +
    "\013\042\007\043\032\046\026\001\002\000\044\002\uffe4" +
    "\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017\uffe4\021\uffe4\022" +
    "\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\001\002\000\044\002\uffdb\007" +
    "\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\040\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\052\002\uffe8\007\uffe8" +
    "\011\uffe8\013\uffe8\014\200\015\uffe8\017\uffe8\020\202\021" +
    "\uffe8\022\uffe8\035\201\040\uffe8\041\uffe8\044\uffe8\045\uffe8" +
    "\047\uffe8\050\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000" +
    "\022\004\016\005\021\006\005\012\015\037\013\042\007" +
    "\043\032\046\026\001\002\000\044\002\uffe5\007\uffe5\011" +
    "\uffe5\013\uffe5\015\uffe5\017\uffe5\021\uffe5\022\uffe5\040\uffe5" +
    "\041\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\001\002\000\010\002\000\021\040\022\041" +
    "\001\002\000\044\002\uffdf\007\uffdf\011\uffdf\013\uffdf\015" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\040\uffdf\041\uffdf\044\uffdf" +
    "\045\uffdf\047\uffdf\050\uffdf\054\uffdf\055\uffdf\056\uffdf\001" +
    "\002\000\022\004\016\005\021\006\005\012\015\037\013" +
    "\042\007\043\032\046\026\001\002\000\004\002\167\001" +
    "\002\000\024\004\016\005\021\006\005\012\015\013\160" +
    "\037\013\042\007\043\032\046\026\001\002\000\056\002" +
    "\uffed\007\uffed\011\uffed\012\137\013\uffed\014\136\015\uffed" +
    "\016\135\017\uffed\020\uffed\021\uffed\022\uffed\035\uffed\040" +
    "\uffed\041\uffed\044\uffed\045\uffed\047\uffed\050\uffed\054\uffed" +
    "\055\uffed\056\uffed\001\002\000\044\002\uffdd\007\uffdd\011" +
    "\uffdd\013\uffdd\015\uffdd\017\uffdd\021\uffdd\022\uffdd\040\uffdd" +
    "\041\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\001\002\000\044\002\uffe0\007\uffe0\011\uffe0" +
    "\013\uffe0\015\uffe0\017\uffe0\021\uffe0\022\uffe0\040\uffe0\041" +
    "\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\001\002\000\044\002\uffe7\007\uffe7\011\uffe7\013" +
    "\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\040\uffe7\041\uffe7" +
    "\044\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\001\002\000\044\002\uffde\007\uffde\011\uffde\013\uffde" +
    "\015\uffde\017\uffde\021\uffde\022\uffde\040\uffde\041\uffde\044" +
    "\uffde\045\uffde\047\uffde\050\uffde\054\uffde\055\uffde\056\uffde" +
    "\001\002\000\044\002\uffdc\007\uffdc\011\uffdc\013\uffdc\015" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\040\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\056\uffdc\001" +
    "\002\000\052\002\uffeb\007\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\035\uffeb\040" +
    "\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\001\002\000\044\002\uffe2\007\uffe2\011" +
    "\uffe2\013\uffe2\015\uffe2\017\uffe2\021\uffe2\022\uffe2\040\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\001\002\000\012\047\uffc8\054\054\055\050" +
    "\056\056\001\002\000\044\002\uffe3\007\uffe3\011\uffe3\013" +
    "\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\040\uffe3\041\uffe3" +
    "\044\uffe3\045\uffe3\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\001\002\000\052\002\uffec\007\uffec\011\uffec\013\uffec" +
    "\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\035" +
    "\uffec\040\uffec\041\uffec\044\uffec\045\uffec\047\uffec\050\uffec" +
    "\054\uffec\055\uffec\056\uffec\001\002\000\044\002\uffe1\007" +
    "\uffe1\011\uffe1\013\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1" +
    "\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\001\002\000\004\004\034\001\002" +
    "\000\044\002\uffe6\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017" +
    "\uffe6\021\uffe6\022\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6" +
    "\047\uffe6\050\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000" +
    "\004\035\035\001\002\000\022\004\016\005\021\006\005" +
    "\012\015\037\013\042\007\043\032\046\026\001\002\000" +
    "\010\021\040\022\041\044\037\001\002\000\022\004\016" +
    "\005\021\006\005\012\015\037\013\042\007\043\032\046" +
    "\026\001\002\000\022\004\016\005\021\006\005\012\015" +
    "\037\013\042\007\043\032\046\026\001\002\000\022\004" +
    "\016\005\021\006\005\012\015\037\013\042\007\043\032" +
    "\046\026\001\002\000\044\002\uffd9\007\uffd9\011\uffd9\013" +
    "\uffd9\015\uffd9\017\uffd9\021\uffd9\022\uffd9\040\uffd9\041\uffd9" +
    "\044\uffd9\045\uffd9\047\uffd9\050\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\001\002\000\044\002\uffda\007\uffda\011\uffda\013\uffda" +
    "\015\uffda\017\uffda\021\uffda\022\uffda\040\uffda\041\uffda\044" +
    "\uffda\045\uffda\047\uffda\050\uffda\054\uffda\055\uffda\056\uffda" +
    "\001\002\000\010\021\040\022\041\045\045\001\002\000" +
    "\022\004\016\005\021\006\005\012\015\037\013\042\007" +
    "\043\032\046\026\001\002\000\044\002\uffcb\007\uffcb\011" +
    "\uffcb\013\uffcb\015\uffcb\017\uffcb\021\040\022\041\040\uffcb" +
    "\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\001\002\000\004\047\125\001\002\000\004" +
    "\004\116\001\002\000\012\047\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\001\002\000\012\047\ufffe\054\ufffe\055\ufffe\056\ufffe" +
    "\001\002\000\012\047\uffff\054\uffff\055\uffff\056\uffff\001" +
    "\002\000\004\004\104\001\002\000\012\047\uffc8\054\054" +
    "\055\050\056\056\001\002\000\004\004\057\001\002\000" +
    "\004\025\060\001\002\000\010\004\062\016\063\036\066" +
    "\001\002\000\012\047\ufffc\054\ufffc\055\ufffc\056\ufffc\001" +
    "\002\000\022\007\ufffb\013\ufffb\017\ufffb\035\ufffb\047\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\001\002\000\006\004\071\017" +
    "\ufff5\001\002\000\022\007\ufff9\013\ufff9\017\ufff9\035\ufff9" +
    "\047\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000\022\007" +
    "\ufffa\013\ufffa\017\ufffa\035\ufffa\047\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\001\002\000\004\051\067\001\002\000\004\004" +
    "\070\001\002\000\022\007\ufff8\013\ufff8\017\ufff8\035\ufff8" +
    "\047\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\004\010" +
    "\101\001\002\000\004\017\100\001\002\000\010\007\074" +
    "\013\ufff3\017\ufff3\001\002\000\004\004\071\001\002\000" +
    "\006\013\ufff6\017\ufff6\001\002\000\010\007\074\013\ufff3" +
    "\017\ufff3\001\002\000\006\013\ufff4\017\ufff4\001\002\000" +
    "\022\007\ufff7\013\ufff7\017\ufff7\035\ufff7\047\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\001\002\000\010\004\062\016\063\036" +
    "\066\001\002\000\010\007\ufff2\013\ufff2\017\ufff2\001\002" +
    "\000\004\047\uffc9\001\002\000\004\012\105\001\002\000" +
    "\006\004\071\013\ufff5\001\002\000\004\013\107\001\002" +
    "\000\006\010\111\025\110\001\002\000\022\004\016\005" +
    "\021\006\005\012\015\037\013\042\007\043\032\046\026" +
    "\001\002\000\004\004\112\001\002\000\004\025\113\001" +
    "\002\000\022\004\016\005\021\006\005\012\015\037\013" +
    "\042\007\043\032\046\026\001\002\000\016\021\040\022" +
    "\041\047\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000\016" +
    "\021\040\022\041\047\ufff1\054\ufff1\055\ufff1\056\ufff1\001" +
    "\002\000\006\010\117\035\120\001\002\000\010\004\062" +
    "\016\063\036\066\001\002\000\022\004\016\005\021\006" +
    "\005\012\015\037\013\042\007\043\032\046\026\001\002" +
    "\000\016\021\040\022\041\047\uffef\054\uffef\055\uffef\056" +
    "\uffef\001\002\000\004\035\123\001\002\000\022\004\016" +
    "\005\021\006\005\012\015\037\013\042\007\043\032\046" +
    "\026\001\002\000\016\021\040\022\041\047\uffee\054\uffee" +
    "\055\uffee\056\uffee\001\002\000\024\004\016\005\021\006" +
    "\005\012\015\037\013\042\007\043\032\046\026\050\uffd2" +
    "\001\002\000\014\011\132\013\uffd0\021\040\022\041\050" +
    "\uffd0\001\002\000\004\050\130\001\002\000\044\002\uffca" +
    "\007\uffca\011\uffca\013\uffca\015\uffca\017\uffca\021\uffca\022" +
    "\uffca\040\uffca\041\uffca\044\uffca\045\uffca\047\uffca\050\uffca" +
    "\054\uffca\055\uffca\056\uffca\001\002\000\006\013\uffd3\050" +
    "\uffd3\001\002\000\022\004\016\005\021\006\005\012\015" +
    "\037\013\042\007\043\032\046\026\001\002\000\014\011" +
    "\132\013\uffd0\021\040\022\041\050\uffd0\001\002\000\006" +
    "\013\uffd1\050\uffd1\001\002\000\006\004\146\017\uffc4\001" +
    "\002\000\022\004\016\005\021\006\005\012\015\037\013" +
    "\042\007\043\032\046\026\001\002\000\024\004\016\005" +
    "\021\006\005\012\015\013\uffd2\037\013\042\007\043\032" +
    "\046\026\001\002\000\004\013\141\001\002\000\044\002" +
    "\uffd4\007\uffd4\011\uffd4\013\uffd4\015\uffd4\017\uffd4\021\uffd4" +
    "\022\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\047\uffd4\050" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000\010\015\143" +
    "\021\040\022\041\001\002\000\004\051\144\001\002\000" +
    "\022\004\016\005\021\006\005\012\015\037\013\042\007" +
    "\043\032\046\026\001\002\000\044\002\uffc7\007\uffc7\011" +
    "\uffc7\013\uffc7\015\uffc7\017\uffc7\021\040\022\041\040\uffc7" +
    "\041\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\004\025\156\001\002\000\004" +
    "\017\155\001\002\000\006\007\151\017\uffc2\001\002\000" +
    "\004\004\146\001\002\000\004\017\uffc5\001\002\000\006" +
    "\007\151\017\uffc2\001\002\000\004\017\uffc3\001\002\000" +
    "\044\002\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6\017\uffc6" +
    "\021\uffc6\022\uffc6\040\uffc6\041\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\022" +
    "\004\016\005\021\006\005\012\015\037\013\042\007\043" +
    "\032\046\026\001\002\000\012\007\uffc1\017\uffc1\021\040" +
    "\022\041\001\002\000\044\002\uffd8\007\uffd8\011\uffd8\013" +
    "\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\040\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\047\uffd8\050\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\001\002\000\012\011\162\013\uffd5\021\040\022\041" +
    "\001\002\000\022\004\016\005\021\006\005\012\015\037" +
    "\013\042\007\043\032\046\026\001\002\000\004\013\164" +
    "\001\002\000\044\002\uffd7\007\uffd7\011\uffd7\013\uffd7\015" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\040\uffd7\041\uffd7\044\uffd7" +
    "\045\uffd7\047\uffd7\050\uffd7\054\uffd7\055\uffd7\056\uffd7\001" +
    "\002\000\012\011\162\013\uffd5\021\040\022\041\001\002" +
    "\000\004\013\uffd6\001\002\000\004\002\001\001\002\000" +
    "\010\021\040\022\041\040\171\001\002\000\022\004\016" +
    "\005\021\006\005\012\015\037\013\042\007\043\032\046" +
    "\026\001\002\000\044\002\uffce\007\uffce\011\uffce\013\uffce" +
    "\015\uffce\017\uffce\021\040\022\041\040\uffce\041\173\044" +
    "\uffce\045\uffce\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce" +
    "\001\002\000\022\004\016\005\021\006\005\012\015\037" +
    "\013\042\007\043\032\046\026\001\002\000\044\002\uffcd" +
    "\007\uffcd\011\uffcd\013\uffcd\015\uffcd\017\uffcd\021\040\022" +
    "\041\040\uffcd\041\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\001\002\000\010\021\040\022" +
    "\041\045\176\001\002\000\022\004\016\005\021\006\005" +
    "\012\015\037\013\042\007\043\032\046\026\001\002\000" +
    "\044\002\uffcc\007\uffcc\011\uffcc\013\uffcc\015\uffcc\017\uffcc" +
    "\021\040\022\041\040\uffcc\041\uffcc\044\uffcc\045\uffcc\047" +
    "\uffcc\050\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000\022" +
    "\004\016\005\021\006\005\012\015\037\013\042\007\043" +
    "\032\046\026\001\002\000\022\004\016\005\021\006\005" +
    "\012\015\037\013\042\007\043\032\046\026\001\002\000" +
    "\004\004\203\001\002\000\052\002\uffe9\007\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\035\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\047\uffe9" +
    "\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000\044\002" +
    "\uffcf\007\uffcf\011\uffcf\013\uffcf\015\uffcf\017\uffcf\021\040" +
    "\022\041\040\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf\050" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002\000\010\015\206" +
    "\021\040\022\041\001\002\000\052\002\uffea\007\uffea\011" +
    "\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\035\uffea\040\uffea\041\uffea\044\uffea\045\uffea\047" +
    "\uffea\050\uffea\054\uffea\055\uffea\056\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\042\003\013\004\010\007\016\022\005\026" +
    "\026\027\024\032\022\033\027\034\023\035\003\036\032" +
    "\040\007\041\030\042\017\043\011\044\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\174\007\016\022\005\026\026\027\024\032\022\033" +
    "\027\034\023\035\003\036\032\040\007\041\030\042\017" +
    "\043\011\044\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\167\007\016\022\005" +
    "\026\026\027\024\032\022\033\027\034\023\035\003\036" +
    "\032\040\007\041\030\042\017\043\011\044\021\001\001" +
    "\000\002\001\001\000\040\004\160\007\016\022\005\026" +
    "\026\027\024\032\022\033\027\034\023\035\003\036\032" +
    "\040\007\041\030\042\017\043\011\044\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\046\011\054\012\051" +
    "\013\050\021\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\035\007\016\022\005\026" +
    "\026\027\024\032\022\033\027\034\023\035\003\036\032" +
    "\040\007\041\030\042\017\043\011\044\021\001\001\000" +
    "\002\001\001\000\040\004\043\007\016\022\005\026\026" +
    "\027\024\032\022\033\027\034\023\035\003\036\032\040" +
    "\007\041\030\042\017\043\011\044\021\001\001\000\040" +
    "\004\042\007\016\022\005\026\026\027\024\032\022\033" +
    "\027\034\023\035\003\036\032\040\007\041\030\042\017" +
    "\043\011\044\021\001\001\000\040\004\041\007\016\022" +
    "\005\026\026\027\024\032\022\033\027\034\023\035\003" +
    "\036\032\040\007\041\030\042\017\043\011\044\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\045\007\016\022\005\026\026\027\024\032" +
    "\022\033\027\034\023\035\003\036\032\040\007\041\030" +
    "\042\017\043\011\044\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\102\011\054\012\051\013\050\021\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\060\030\063\031" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\072\016\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\074\001" +
    "\001\000\004\015\075\001\001\000\002\001\001\000\004" +
    "\017\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\101\030\063\031\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\072\016" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\114\007\016\022\005\026\026\027\024\032\022\033" +
    "\027\034\023\035\003\036\032\040\007\041\030\042\017" +
    "\043\011\044\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\113\007\016\022\005\026\026\027\024" +
    "\032\022\033\027\034\023\035\003\036\032\040\007\041" +
    "\030\042\017\043\011\044\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\121\030" +
    "\063\031\064\001\001\000\040\004\120\007\016\022\005" +
    "\026\026\027\024\032\022\033\027\034\023\035\003\036" +
    "\032\040\007\041\030\042\017\043\011\044\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\123\007" +
    "\016\022\005\026\026\027\024\032\022\033\027\034\023" +
    "\035\003\036\032\040\007\041\030\042\017\043\011\044" +
    "\021\001\001\000\002\001\001\000\042\004\125\005\126" +
    "\007\016\022\005\026\026\027\024\032\022\033\027\034" +
    "\023\035\003\036\032\040\007\041\030\042\017\043\011" +
    "\044\021\001\001\000\004\006\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\132" +
    "\007\016\022\005\026\026\027\024\032\022\033\027\034" +
    "\023\035\003\036\032\040\007\041\030\042\017\043\011" +
    "\044\021\001\001\000\004\006\133\001\001\000\002\001" +
    "\001\000\006\023\146\025\147\001\001\000\040\004\141" +
    "\007\016\022\005\026\026\027\024\032\022\033\027\034" +
    "\023\035\003\036\032\040\007\041\030\042\017\043\011" +
    "\044\021\001\001\000\042\004\125\005\137\007\016\022" +
    "\005\026\026\027\024\032\022\033\027\034\023\035\003" +
    "\036\032\040\007\041\030\042\017\043\011\044\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\144\007\016\022\005\026" +
    "\026\027\024\032\022\033\027\034\023\035\003\036\032" +
    "\040\007\041\030\042\017\043\011\044\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\151\001\001\000\004\025\152\001\001\000\002\001" +
    "\001\000\004\024\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\156\007\016\022\005\026\026\027" +
    "\024\032\022\033\027\034\023\035\003\036\032\040\007" +
    "\041\030\042\017\043\011\044\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\162\001\001\000\040" +
    "\004\164\007\016\022\005\026\026\027\024\032\022\033" +
    "\027\034\023\035\003\036\032\040\007\041\030\042\017" +
    "\043\011\044\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\171\007\016\022" +
    "\005\026\026\027\024\032\022\033\027\034\023\035\003" +
    "\036\032\040\007\041\030\042\017\043\011\044\021\001" +
    "\001\000\002\001\001\000\040\004\173\007\016\022\005" +
    "\026\026\027\024\032\022\033\027\034\023\035\003\036" +
    "\032\040\007\041\030\042\017\043\011\044\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\176\007" +
    "\016\022\005\026\026\027\024\032\022\033\027\034\023" +
    "\035\003\036\032\040\007\041\030\042\017\043\011\044" +
    "\021\001\001\000\002\001\001\000\040\004\204\007\016" +
    "\022\005\026\026\027\024\032\022\033\027\034\023\035" +
    "\003\036\032\040\007\041\030\042\017\043\011\044\021" +
    "\001\001\000\040\004\203\007\016\022\005\026\026\027" +
    "\024\032\022\033\027\034\023\035\003\036\032\040\007" +
    "\041\030\042\017\043\011\044\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  //public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fieldCreate ::= ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fieldCreateListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fieldCreateList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arrCreate ::= ID LBRACK exp RBRACK OF exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decList ::= dec decList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // letExp ::= LET decList IN expList END 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // forExp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*forExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // whileExp ::= WHILE exp DO exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(33/*whileExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ifThenElse ::= IF exp THEN exp ELSE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(32/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ifThen ::= IF exp THEN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*ifThen*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= lValue ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expListAux ::= SEMICOLON exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expList ::= exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // callExp ::= ID LPAREN expList RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // seqExpAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // seqExp ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // infixExp ::= exp MINUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // infixExp ::= exp PLUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // infixExp ::= INT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= arrCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= letExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= forExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= whileExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= ifThenElse 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= ifThen 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= assignment 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= recCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= infixExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= callExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= seqExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= STRING 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= lValue 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldExp ::= lValue DOT ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*fieldExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subscript ::= lValue LBRACK exp RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*subscript*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lValue ::= fieldExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lValue ::= subscript 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lValue ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDec ::= VAR ID ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fieldDec ::= ID COLON ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fieldDecListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fieldDecList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arrTy ::= ARRAY OF ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ty ::= arrTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ty ::= recTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ty ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tyDec ::= TYPE ID EQ ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= funcDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= tyDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec ::= varDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

