
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Oct 27 10:35:50 GMT 2019
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Sun Oct 27 10:35:50 GMT 2019
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\003\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\006" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\027\005\000\002\030\005\000\002\016\004\000\002" +
    "\016\002\000\002\017\005\000\002\017\002\000\002\015" +
    "\005\000\002\013\011\000\002\013\013\000\002\020\006" +
    "\000\002\020\010\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\032\006\000\002\033\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\044\004\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\035\004\000\002\035\006\000\002\036\005" +
    "\000\002\036\002\000\002\037\006\000\002\005\004\000" +
    "\002\005\002\000\002\006\005\000\002\006\002\000\002" +
    "\026\005\000\002\040\006\000\002\041\010\000\002\042" +
    "\006\000\002\043\012\000\002\007\007\000\002\010\004" +
    "\000\002\010\002\000\002\031\005\000\002\025\006\000" +
    "\002\022\004\000\002\022\002\000\002\023\005\000\002" +
    "\023\002\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\030\004\020\005\023\006\005\012\017\022" +
    "\031\037\013\042\010\043\035\046\032\052\025\053\016" +
    "\001\002\000\070\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015" +
    "\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\040\uffe2\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\001\002\000\070\002\uffe6\007" +
    "\uffe6\011\uffe6\013\uffe6\015\uffe6\017\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\040\uffe6\041\uffe6\044\uffe6" +
    "\045\uffe6\047\uffe6\050\uffe6\054\uffe6\055\uffe6\056\uffe6\001" +
    "\002\000\070\002\uffde\007\uffde\011\uffde\013\uffde\015\uffde" +
    "\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\040\uffde\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde\054" +
    "\uffde\055\uffde\056\uffde\001\002\000\076\002\uffe8\007\uffe8" +
    "\011\uffe8\013\uffe8\014\226\015\uffe8\017\uffe8\020\230\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\227\040" +
    "\uffe8\041\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\001\002\000\030\004\020\005\023\006" +
    "\005\012\017\022\031\037\013\042\010\043\035\046\032" +
    "\052\025\053\016\001\002\000\070\002\uffe3\007\uffe3\011" +
    "\uffe3\013\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000" +
    "\034\002\000\021\051\022\043\023\055\024\045\025\052" +
    "\026\050\027\056\030\053\031\054\032\046\033\044\034" +
    "\057\001\002\000\030\004\020\005\023\006\005\012\017" +
    "\022\031\037\013\042\010\043\035\046\032\052\025\053" +
    "\016\001\002\000\070\002\uffdb\007\uffdb\011\uffdb\013\uffdb" +
    "\015\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\040\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\050" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002\000\004\002\215" +
    "\001\002\000\070\002\uffe7\007\uffe7\011\uffe7\013\uffe7\015" +
    "\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\001\002\000\032\004\020\005" +
    "\023\006\005\012\017\013\206\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\102\002" +
    "\uffed\007\uffed\011\uffed\012\171\013\uffed\014\uffed\015\uffed" +
    "\016\170\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\040\uffed\041\uffed\044\uffed\045" +
    "\uffed\047\uffed\050\uffed\054\uffed\055\uffed\056\uffed\001\002" +
    "\000\070\002\uffdd\007\uffdd\011\uffdd\013\uffdd\015\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\040" +
    "\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\001\002\000\070\002\uffd8\007\uffd8\011" +
    "\uffd8\013\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\047\uffd8\050\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000" +
    "\070\002\uffe5\007\uffe5\011\uffe5\013\uffe5\015\uffe5\017\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\040\uffe5" +
    "\041\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\001\002\000\070\002\uffda\007\uffda\011\uffda" +
    "\013\uffda\015\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\040\uffda\041\uffda\044\uffda\045\uffda\047" +
    "\uffda\050\uffda\054\uffda\055\uffda\056\uffda\001\002\000\070" +
    "\002\uffd9\007\uffd9\011\uffd9\013\uffd9\015\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\040\uffd9\041" +
    "\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\001\002\000\070\002\uffe1\007\uffe1\011\uffe1\013" +
    "\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\050\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\076\002" +
    "\uffeb\007\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb\050" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\070\002\uffdf" +
    "\007\uffdf\011\uffdf\013\uffdf\015\uffdf\017\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf\044" +
    "\uffdf\045\uffdf\047\uffdf\050\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\001\002\000\030\004\020\005\023\006\005\012\017\022" +
    "\031\037\013\042\010\043\035\046\032\052\025\053\016" +
    "\001\002\000\012\047\uffba\054\106\055\102\056\110\001" +
    "\002\000\070\002\uffe0\007\uffe0\011\uffe0\013\uffe0\015\uffe0" +
    "\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\100\002\uffec\007\uffec" +
    "\011\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\040" +
    "\uffec\041\uffec\044\uffec\045\uffec\047\uffec\050\uffec\051\077" +
    "\054\uffec\055\uffec\056\uffec\001\002\000\004\004\040\001" +
    "\002\000\070\002\uffdc\007\uffdc\011\uffdc\013\uffdc\015\uffdc" +
    "\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\040\uffdc\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\001\002\000\070\002\uffe4\007\uffe4" +
    "\011\uffe4\013\uffe4\015\uffe4\017\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\040\uffe4\041\uffe4\044\uffe4\045" +
    "\uffe4\047\uffe4\050\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002" +
    "\000\004\035\041\001\002\000\030\004\020\005\023\006" +
    "\005\012\017\022\031\037\013\042\010\043\035\046\032" +
    "\052\025\053\016\001\002\000\034\021\051\022\043\023" +
    "\055\024\045\025\052\026\050\027\056\030\053\031\054" +
    "\032\046\033\044\034\057\044\047\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\070\002" +
    "\uffcb\007\uffcb\011\uffcb\013\uffcb\015\uffcb\017\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\040\uffcb\041\uffcb" +
    "\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\001\002\000\070\002\uffcf\007\uffcf\011\uffcf\013\uffcf" +
    "\015\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\053\031\uffcf\032\046\033\044" +
    "\034\057\040\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf\050" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002\000\070\002\uffd4" +
    "\007\uffd4\011\uffd4\013\uffd4\015\uffd4\017\uffd4\021\051\022" +
    "\043\023\uffd4\024\uffd4\025\052\026\050\027\056\030\053" +
    "\031\054\032\046\033\044\034\057\040\uffd4\041\uffd4\044" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\001\002\000\070\002\uffd0\007\uffd0\011\uffd0\013\uffd0\015" +
    "\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\053\031\uffd0\032\046\033\044\034" +
    "\057\040\uffd0\041\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\001\002\000\070\002\uffcd\007" +
    "\uffcd\011\uffcd\013\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\044\034\057\040\uffcd\041\uffcd\044\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd\001" +
    "\002\000\070\002\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2" +
    "\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\056\030\053\031\054\032\046\033\044\034\057" +
    "\040\uffd2\041\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\001\002\000\070\002\uffd6\007\uffd6" +
    "\011\uffd6\013\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\052\026\050\027\056\030\053\031\054" +
    "\032\046\033\044\034\057\040\uffd6\041\uffd6\044\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002" +
    "\000\070\002\uffd1\007\uffd1\011\uffd1\013\uffd1\015\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\056\030\053\031\054\032\046\033\044\034\057\040" +
    "\uffd1\041\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\001\002\000\034\021\051\022\043\023" +
    "\055\024\045\025\052\026\050\027\056\030\053\031\054" +
    "\032\046\033\044\034\057\045\071\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\070\002" +
    "\uffbd\007\uffbd\011\uffbd\013\uffbd\015\uffbd\017\uffbd\021\051" +
    "\022\043\023\055\024\045\025\052\026\050\027\056\030" +
    "\053\031\054\032\046\033\044\034\057\040\uffbd\041\uffbd" +
    "\044\uffbd\045\uffbd\047\uffbd\050\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\001\002\000\070\002\uffce\007\uffce\011\uffce\013\uffce" +
    "\015\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\044" +
    "\034\057\040\uffce\041\uffce\044\uffce\045\uffce\047\uffce\050" +
    "\uffce\054\uffce\055\uffce\056\uffce\001\002\000\070\002\uffd3" +
    "\007\uffd3\011\uffd3\013\uffd3\015\uffd3\017\uffd3\021\051\022" +
    "\043\023\uffd3\024\uffd3\025\052\026\050\027\056\030\053" +
    "\031\054\032\046\033\044\034\057\040\uffd3\041\uffd3\044" +
    "\uffd3\045\uffd3\047\uffd3\050\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\001\002\000\070\002\uffcc\007\uffcc\011\uffcc\013\uffcc\015" +
    "\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\040\uffcc\041\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\001\002\000\070\002\uffd5\007" +
    "\uffd5\011\uffd5\013\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\052\026\050\027\056\030\053\031" +
    "\054\032\046\033\044\034\057\040\uffd5\041\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\054\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\030\004\020\005\023\006\005\012\017\022\031" +
    "\037\013\042\010\043\035\046\032\052\025\053\016\001" +
    "\002\000\070\002\uffb9\007\uffb9\011\uffb9\013\uffb9\015\uffb9" +
    "\017\uffb9\021\051\022\043\023\055\024\045\025\052\026" +
    "\050\027\056\030\053\031\054\032\046\033\044\034\057" +
    "\040\uffb9\041\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\001\002\000\004\047\157\001\002" +
    "\000\004\004\150\001\002\000\012\047\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\001\002\000\012\047\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\001\002\000\012\047\uffff\054\uffff\055\uffff\056" +
    "\uffff\001\002\000\004\004\136\001\002\000\012\047\uffba" +
    "\054\106\055\102\056\110\001\002\000\004\004\111\001" +
    "\002\000\004\025\112\001\002\000\010\004\114\016\115" +
    "\036\120\001\002\000\012\047\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\001\002\000\022\007\ufffb\013\ufffb\017\ufffb\035\ufffb" +
    "\047\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\006\004" +
    "\123\017\ufff5\001\002\000\022\007\ufff9\013\ufff9\017\ufff9" +
    "\035\ufff9\047\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000" +
    "\022\007\ufffa\013\ufffa\017\ufffa\035\ufffa\047\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\004\051\121\001\002\000" +
    "\004\004\122\001\002\000\022\007\ufff8\013\ufff8\017\ufff8" +
    "\035\ufff8\047\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\004\010\133\001\002\000\004\017\132\001\002\000\010" +
    "\007\126\013\ufff3\017\ufff3\001\002\000\004\004\123\001" +
    "\002\000\006\013\ufff6\017\ufff6\001\002\000\010\007\126" +
    "\013\ufff3\017\ufff3\001\002\000\006\013\ufff4\017\ufff4\001" +
    "\002\000\022\007\ufff7\013\ufff7\017\ufff7\035\ufff7\047\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\001\002\000\010\004\114\016" +
    "\115\036\120\001\002\000\010\007\ufff2\013\ufff2\017\ufff2" +
    "\001\002\000\004\047\uffbb\001\002\000\004\012\137\001" +
    "\002\000\006\004\123\013\ufff5\001\002\000\004\013\141" +
    "\001\002\000\006\010\143\025\142\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\004\004" +
    "\144\001\002\000\004\025\145\001\002\000\030\004\020" +
    "\005\023\006\005\012\017\022\031\037\013\042\010\043" +
    "\035\046\032\052\025\053\016\001\002\000\042\021\051" +
    "\022\043\023\055\024\045\025\052\026\050\027\056\030" +
    "\053\031\054\032\046\033\044\034\057\047\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\001\002\000\042\021\051\022\043\023" +
    "\055\024\045\025\052\026\050\027\056\030\053\031\054" +
    "\032\046\033\044\034\057\047\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\001\002\000\006\010\151\035\152\001\002\000\010" +
    "\004\114\016\115\036\120\001\002\000\030\004\020\005" +
    "\023\006\005\012\017\022\031\037\013\042\010\043\035" +
    "\046\032\052\025\053\016\001\002\000\042\021\051\022" +
    "\043\023\055\024\045\025\052\026\050\027\056\030\053" +
    "\031\054\032\046\033\044\034\057\047\uffef\054\uffef\055" +
    "\uffef\056\uffef\001\002\000\004\035\155\001\002\000\030" +
    "\004\020\005\023\006\005\012\017\022\031\037\013\042" +
    "\010\043\035\046\032\052\025\053\016\001\002\000\042" +
    "\021\051\022\043\023\055\024\045\025\052\026\050\027" +
    "\056\030\053\031\054\032\046\033\044\034\057\047\uffee" +
    "\054\uffee\055\uffee\056\uffee\001\002\000\032\004\020\005" +
    "\023\006\005\012\017\022\031\037\013\042\010\043\035" +
    "\046\032\050\uffc4\052\025\053\016\001\002\000\040\011" +
    "\164\013\uffc2\021\051\022\043\023\055\024\045\025\052" +
    "\026\050\027\056\030\053\031\054\032\046\033\044\034" +
    "\057\050\uffc2\001\002\000\004\050\162\001\002\000\070" +
    "\002\uffbc\007\uffbc\011\uffbc\013\uffbc\015\uffbc\017\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\040\uffbc\041" +
    "\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\001\002\000\006\013\uffc5\050\uffc5\001\002\000" +
    "\030\004\020\005\023\006\005\012\017\022\031\037\013" +
    "\042\010\043\035\046\032\052\025\053\016\001\002\000" +
    "\040\011\164\013\uffc2\021\051\022\043\023\055\024\045" +
    "\025\052\026\050\027\056\030\053\031\054\032\046\033" +
    "\044\034\057\050\uffc2\001\002\000\006\013\uffc3\050\uffc3" +
    "\001\002\000\070\002\uffd7\007\uffd7\011\uffd7\013\uffd7\015" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\052" +
    "\026\050\027\056\030\053\031\054\032\046\033\044\034" +
    "\057\040\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\001\002\000\006\004\174\017" +
    "\uffb6\001\002\000\032\004\020\005\023\006\005\012\017" +
    "\013\uffc4\022\031\037\013\042\010\043\035\046\032\052" +
    "\025\053\016\001\002\000\004\013\173\001\002\000\070" +
    "\002\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6\017\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\040\uffc6\041" +
    "\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\001\002\000\004\025\204\001\002\000\004\017" +
    "\203\001\002\000\006\007\177\017\uffb4\001\002\000\004" +
    "\004\174\001\002\000\004\017\uffb7\001\002\000\006\007" +
    "\177\017\uffb4\001\002\000\004\017\uffb5\001\002\000\070" +
    "\002\uffb8\007\uffb8\011\uffb8\013\uffb8\015\uffb8\017\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\040\uffb8\041" +
    "\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\001\002\000\030\004\020\005\023\006\005\012" +
    "\017\022\031\037\013\042\010\043\035\046\032\052\025" +
    "\053\016\001\002\000\036\007\uffb3\017\uffb3\021\051\022" +
    "\043\023\055\024\045\025\052\026\050\027\056\030\053" +
    "\031\054\032\046\033\044\034\057\001\002\000\070\002" +
    "\uffca\007\uffca\011\uffca\013\uffca\015\uffca\017\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\040\uffca\041\uffca" +
    "\044\uffca\045\uffca\047\uffca\050\uffca\054\uffca\055\uffca\056" +
    "\uffca\001\002\000\036\011\211\013\uffc7\021\051\022\043" +
    "\023\055\024\045\025\052\026\050\027\056\030\053\031" +
    "\054\032\046\033\044\034\057\001\002\000\004\013\214" +
    "\001\002\000\030\004\020\005\023\006\005\012\017\022" +
    "\031\037\013\042\010\043\035\046\032\052\025\053\016" +
    "\001\002\000\036\011\211\013\uffc7\021\051\022\043\023" +
    "\055\024\045\025\052\026\050\027\056\030\053\031\054" +
    "\032\046\033\044\034\057\001\002\000\004\013\uffc8\001" +
    "\002\000\070\002\uffc9\007\uffc9\011\uffc9\013\uffc9\015\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\040\uffc9\041\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\001\002\000\004\002\001\001\002" +
    "\000\034\021\051\022\043\023\055\024\045\025\052\026" +
    "\050\027\056\030\053\031\054\032\046\033\044\034\057" +
    "\040\217\001\002\000\030\004\020\005\023\006\005\012" +
    "\017\022\031\037\013\042\010\043\035\046\032\052\025" +
    "\053\016\001\002\000\070\002\uffc0\007\uffc0\011\uffc0\013" +
    "\uffc0\015\uffc0\017\uffc0\021\051\022\043\023\055\024\045" +
    "\025\052\026\050\027\056\030\053\031\054\032\046\033" +
    "\044\034\057\040\uffc0\041\221\044\uffc0\045\uffc0\047\uffc0" +
    "\050\uffc0\054\uffc0\055\uffc0\056\uffc0\001\002\000\030\004" +
    "\020\005\023\006\005\012\017\022\031\037\013\042\010" +
    "\043\035\046\032\052\025\053\016\001\002\000\070\002" +
    "\uffbf\007\uffbf\011\uffbf\013\uffbf\015\uffbf\017\uffbf\021\051" +
    "\022\043\023\055\024\045\025\052\026\050\027\056\030" +
    "\053\031\054\032\046\033\044\034\057\040\uffbf\041\uffbf" +
    "\044\uffbf\045\uffbf\047\uffbf\050\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\001\002\000\034\021\051\022\043\023\055\024\045" +
    "\025\052\026\050\027\056\030\053\031\054\032\046\033" +
    "\044\034\057\045\224\001\002\000\030\004\020\005\023" +
    "\006\005\012\017\022\031\037\013\042\010\043\035\046" +
    "\032\052\025\053\016\001\002\000\070\002\uffbe\007\uffbe" +
    "\011\uffbe\013\uffbe\015\uffbe\017\uffbe\021\051\022\043\023" +
    "\055\024\045\025\052\026\050\027\056\030\053\031\054" +
    "\032\046\033\044\034\057\040\uffbe\041\uffbe\044\uffbe\045" +
    "\uffbe\047\uffbe\050\uffbe\054\uffbe\055\uffbe\056\uffbe\001\002" +
    "\000\030\004\020\005\023\006\005\012\017\022\031\037" +
    "\013\042\010\043\035\046\032\052\025\053\016\001\002" +
    "\000\030\004\020\005\023\006\005\012\017\022\031\037" +
    "\013\042\010\043\035\046\032\052\025\053\016\001\002" +
    "\000\004\004\231\001\002\000\076\002\uffe9\007\uffe9\011" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\040\uffe9" +
    "\041\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\001\002\000\070\002\uffc1\007\uffc1\011\uffc1" +
    "\013\uffc1\015\uffc1\017\uffc1\021\051\022\043\023\055\024" +
    "\045\025\052\026\050\027\056\030\053\031\054\032\046" +
    "\033\044\034\057\040\uffc1\041\uffc1\044\uffc1\045\uffc1\047" +
    "\uffc1\050\uffc1\054\uffc1\055\uffc1\056\uffc1\001\002\000\034" +
    "\015\234\021\051\022\043\023\055\024\045\025\052\026" +
    "\050\027\056\030\053\031\054\032\046\033\044\034\057" +
    "\001\002\000\100\002\uffea\007\uffea\011\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\040\uffea\041\uffea\044\uffea" +
    "\045\uffea\047\uffea\050\uffea\051\uffea\054\uffea\055\uffea\056" +
    "\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\044\003\014\004\011\007\021\021\006\025" +
    "\032\026\027\031\025\032\033\033\026\034\003\035\036" +
    "\037\010\040\035\041\020\042\013\043\023\044\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\222\007\021\021\006\025" +
    "\032\026\027\031\025\032\033\033\026\034\003\035\036" +
    "\037\010\040\035\041\020\042\013\043\023\044\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\215" +
    "\007\021\021\006\025\032\026\027\031\025\032\033\033" +
    "\026\034\003\035\036\037\010\040\035\041\020\042\013" +
    "\043\023\044\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\206\007\021\021\006" +
    "\025\032\026\027\031\025\032\033\033\026\034\003\035" +
    "\036\037\010\040\035\041\020\042\013\043\023\044\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\166\007\021\021\006\025\032\026\027\031\025" +
    "\032\033\033\026\034\003\035\036\037\010\040\035\041" +
    "\020\042\013\043\023\044\005\001\001\000\014\010\100" +
    "\011\106\012\103\013\102\020\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\041\007" +
    "\021\021\006\025\032\026\027\031\025\032\033\033\026" +
    "\034\003\035\036\037\010\040\035\041\020\042\013\043" +
    "\023\044\005\001\001\000\002\001\001\000\042\004\075" +
    "\007\021\021\006\025\032\026\027\031\025\032\033\033" +
    "\026\034\003\035\036\037\010\040\035\041\020\042\013" +
    "\043\023\044\005\001\001\000\042\004\074\007\021\021" +
    "\006\025\032\026\027\031\025\032\033\033\026\034\003" +
    "\035\036\037\010\040\035\041\020\042\013\043\023\044" +
    "\005\001\001\000\042\004\073\007\021\021\006\025\032" +
    "\026\027\031\025\032\033\033\026\034\003\035\036\037" +
    "\010\040\035\041\020\042\013\043\023\044\005\001\001" +
    "\000\042\004\072\007\021\021\006\025\032\026\027\031" +
    "\025\032\033\033\026\034\003\035\036\037\010\040\035" +
    "\041\020\042\013\043\023\044\005\001\001\000\042\004" +
    "\067\007\021\021\006\025\032\026\027\031\025\032\033" +
    "\033\026\034\003\035\036\037\010\040\035\041\020\042" +
    "\013\043\023\044\005\001\001\000\042\004\066\007\021" +
    "\021\006\025\032\026\027\031\025\032\033\033\026\034" +
    "\003\035\036\037\010\040\035\041\020\042\013\043\023" +
    "\044\005\001\001\000\042\004\065\007\021\021\006\025" +
    "\032\026\027\031\025\032\033\033\026\034\003\035\036" +
    "\037\010\040\035\041\020\042\013\043\023\044\005\001" +
    "\001\000\042\004\064\007\021\021\006\025\032\026\027" +
    "\031\025\032\033\033\026\034\003\035\036\037\010\040" +
    "\035\041\020\042\013\043\023\044\005\001\001\000\042" +
    "\004\063\007\021\021\006\025\032\026\027\031\025\032" +
    "\033\033\026\034\003\035\036\037\010\040\035\041\020" +
    "\042\013\043\023\044\005\001\001\000\042\004\062\007" +
    "\021\021\006\025\032\026\027\031\025\032\033\033\026" +
    "\034\003\035\036\037\010\040\035\041\020\042\013\043" +
    "\023\044\005\001\001\000\042\004\061\007\021\021\006" +
    "\025\032\026\027\031\025\032\033\033\026\034\003\035" +
    "\036\037\010\040\035\041\020\042\013\043\023\044\005" +
    "\001\001\000\042\004\060\007\021\021\006\025\032\026" +
    "\027\031\025\032\033\033\026\034\003\035\036\037\010" +
    "\040\035\041\020\042\013\043\023\044\005\001\001\000" +
    "\042\004\057\007\021\021\006\025\032\026\027\031\025" +
    "\032\033\033\026\034\003\035\036\037\010\040\035\041" +
    "\020\042\013\043\023\044\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\071\007\021\021" +
    "\006\025\032\026\027\031\025\032\033\033\026\034\003" +
    "\035\036\037\010\040\035\041\020\042\013\043\023\044" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\077\007\021\021\006\025\032\026\027\031\025\032\033" +
    "\033\026\034\003\035\036\037\010\040\035\041\020\042" +
    "\013\043\023\044\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\134" +
    "\011\106\012\103\013\102\020\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\112\027\115\030\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\124\016\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\126\001\001" +
    "\000\004\015\127\001\001\000\002\001\001\000\004\017" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\133\027\115\030\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\124\016\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\146\007\021\021\006\025\032\026\027\031\025\032\033" +
    "\033\026\034\003\035\036\037\010\040\035\041\020\042" +
    "\013\043\023\044\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\145\007\021\021\006\025\032\026" +
    "\027\031\025\032\033\033\026\034\003\035\036\037\010" +
    "\040\035\041\020\042\013\043\023\044\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\153\027\115\030\116\001\001\000\042\004\152\007" +
    "\021\021\006\025\032\026\027\031\025\032\033\033\026" +
    "\034\003\035\036\037\010\040\035\041\020\042\013\043" +
    "\023\044\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\155\007\021\021\006\025\032\026\027\031" +
    "\025\032\033\033\026\034\003\035\036\037\010\040\035" +
    "\041\020\042\013\043\023\044\005\001\001\000\002\001" +
    "\001\000\044\004\157\005\160\007\021\021\006\025\032" +
    "\026\027\031\025\032\033\033\026\034\003\035\036\037" +
    "\010\040\035\041\020\042\013\043\023\044\005\001\001" +
    "\000\004\006\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\164\007\021\021\006" +
    "\025\032\026\027\031\025\032\033\033\026\034\003\035" +
    "\036\037\010\040\035\041\020\042\013\043\023\044\005" +
    "\001\001\000\004\006\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\174\024\175\001\001\000\044" +
    "\004\157\005\171\007\021\021\006\025\032\026\027\031" +
    "\025\032\033\033\026\034\003\035\036\037\010\040\035" +
    "\041\020\042\013\043\023\044\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\177\001\001\000\004\024\200\001\001\000" +
    "\002\001\001\000\004\023\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\204\007\021\021\006\025" +
    "\032\026\027\031\025\032\033\033\026\034\003\035\036" +
    "\037\010\040\035\041\020\042\013\043\023\044\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\207" +
    "\001\001\000\002\001\001\000\042\004\211\007\021\021" +
    "\006\025\032\026\027\031\025\032\033\033\026\034\003" +
    "\035\036\037\010\040\035\041\020\042\013\043\023\044" +
    "\005\001\001\000\004\036\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\217\007\021\021\006\025\032\026\027\031\025" +
    "\032\033\033\026\034\003\035\036\037\010\040\035\041" +
    "\020\042\013\043\023\044\005\001\001\000\002\001\001" +
    "\000\042\004\221\007\021\021\006\025\032\026\027\031" +
    "\025\032\033\033\026\034\003\035\036\037\010\040\035" +
    "\041\020\042\013\043\023\044\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\224\007\021\021\006" +
    "\025\032\026\027\031\025\032\033\033\026\034\003\035" +
    "\036\037\010\040\035\041\020\042\013\043\023\044\005" +
    "\001\001\000\002\001\001\000\042\004\232\007\021\021" +
    "\006\025\032\026\027\031\025\032\033\033\026\034\003" +
    "\035\036\037\010\040\035\041\020\042\013\043\023\044" +
    "\005\001\001\000\042\004\231\007\021\021\006\025\032" +
    "\026\027\031\025\032\033\033\026\034\003\035\036\037" +
    "\010\040\035\041\020\042\013\043\023\044\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fieldCreate ::= ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fieldCreateListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fieldCreateList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arrCreate ::= subscript OF exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // decList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // decList ::= dec decList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // letExp ::= LET decList IN expList END 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.LetExp(0, (Absyn.DecList)e1, (Absyn.Exp)e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forExp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(33/*forExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // whileExp ::= WHILE exp DO exp 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(0, (Absyn.Exp)e1, (Absyn.Exp)e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*whileExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ifThenElse ::= IF exp THEN exp ELSE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*ifThenElse*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ifThen ::= IF exp THEN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*ifThen*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment ::= lValue ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expListAux ::= SEMICOLON exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expList ::= exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // callExp ::= ID LPAREN expList RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // seqExpAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(28/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // seqExp ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // infixExp ::= exp OR exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // infixExp ::= exp AND exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // infixExp ::= exp LE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // infixExp ::= exp GE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // infixExp ::= exp LT exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // infixExp ::= exp GT exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // infixExp ::= exp NEQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // infixExp ::= exp EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // infixExp ::= exp DIVIDE exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // infixExp ::= exp TIMES exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // infixExp ::= exp MINUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // infixExp ::= exp PLUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // negation ::= MINUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*negation*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= letExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= BREAK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= forExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= whileExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= ifThen 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= ifThenElse 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= negation 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= assignment 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= recCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= arrCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= infixExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= callExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= seqExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(0, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= INT 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 System.out.println(i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= NIL 
            {
              Object RESULT = null;
		 RESULT = new Absyn.NilExp(0); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= lValue 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldExp ::= lValue DOT ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*fieldExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subscript ::= lValue LBRACK exp RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*subscript*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lValue ::= fieldExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lValue ::= subscript 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lValue ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDec ::= VAR ID ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fieldDec ::= ID COLON ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fieldDecListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fieldDecList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arrTy ::= ARRAY OF ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ty ::= arrTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ty ::= recTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ty ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tyDec ::= TYPE ID EQ ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= funcDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= tyDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec ::= varDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = (Absyn.Exp)e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

