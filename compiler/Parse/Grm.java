
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Oct 23 19:29:53 IST 2019
//----------------------------------------------------

package Parse;


/** CUP v0.10k generated parser.
  * @version Wed Oct 23 19:29:53 IST 2019
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\003\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\006" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\031\005\000\002\032\005\000\002\016\004\000\002" +
    "\016\002\000\002\017\005\000\002\017\002\000\002\015" +
    "\005\000\002\013\011\000\002\013\013\000\002\021\006" +
    "\000\002\021\010\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\034\006\000\002\035\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\037\003\000" +
    "\002\037\005\000\002\037\005\000\002\040\004\000\002" +
    "\040\006\000\002\041\005\000\002\041\002\000\002\042" +
    "\006\000\002\005\004\000\002\005\002\000\002\006\005" +
    "\000\002\006\002\000\002\027\005\000\002\007\007\000" +
    "\002\010\004\000\002\010\002\000\002\033\010\000\002" +
    "\026\006\000\002\023\004\000\002\023\002\000\002\024" +
    "\005\000\002\024\002\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\014\004\017\005\015\006\004\012\024\046" +
    "\023\001\002\000\034\002\uffdf\007\uffdf\011\uffdf\013\uffdf" +
    "\015\uffdf\017\uffdf\021\uffdf\022\uffdf\047\uffdf\050\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\001\002\000\034\002\uffe4\007\uffe4" +
    "\011\uffe4\013\uffe4\015\uffe4\017\uffe4\021\uffe4\022\uffe4\047" +
    "\uffe4\050\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002\000\034" +
    "\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2\021" +
    "\uffe2\022\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\001\002\000\010\002\000\021\030\022\031\001\002\000" +
    "\034\002\uffe5\007\uffe5\011\uffe5\013\uffe5\015\uffe5\017\uffe5" +
    "\021\uffe5\022\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\001\002\000\034\002\uffe6\007\uffe6\011\uffe6\013\uffe6" +
    "\015\uffe6\017\uffe6\021\uffe6\022\uffe6\047\uffe6\050\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\001\002\000\034\002\uffe3\007\uffe3" +
    "\011\uffe3\013\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\047" +
    "\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\004" +
    "\002\160\001\002\000\034\002\uffe1\007\uffe1\011\uffe1\013" +
    "\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1\047\uffe1\050\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\001\002\000\034\002\uffe7\007" +
    "\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7" +
    "\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000" +
    "\042\002\uffeb\007\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\035\uffeb\047\uffeb\050" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\046\002\uffed" +
    "\007\uffed\011\uffed\012\137\013\uffed\014\136\015\uffed\016" +
    "\135\017\uffed\020\uffed\021\uffed\022\uffed\035\uffed\047\uffed" +
    "\050\uffed\054\uffed\055\uffed\056\uffed\001\002\000\042\002" +
    "\uffe8\007\uffe8\011\uffe8\013\uffe8\014\126\015\uffe8\017\uffe8" +
    "\020\130\021\uffe8\022\uffe8\035\127\047\uffe8\050\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\001\002\000\042\002\uffec\007\uffec" +
    "\011\uffec\013\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\035\uffec\047\uffec\050\uffec\054\uffec\055\uffec" +
    "\056\uffec\001\002\000\034\002\uffe0\007\uffe0\011\uffe0\013" +
    "\uffe0\015\uffe0\017\uffe0\021\uffe0\022\uffe0\047\uffe0\050\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\001\002\000\012\047\uffd0\054" +
    "\045\055\041\056\047\001\002\000\016\004\017\005\015" +
    "\006\004\012\024\013\026\046\023\001\002\000\012\011" +
    "\027\013\uffd9\021\030\022\031\001\002\000\034\002\uffdc" +
    "\007\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc\021\uffdc\022" +
    "\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002" +
    "\000\014\004\017\005\015\006\004\012\024\046\023\001" +
    "\002\000\014\004\017\005\015\006\004\012\024\046\023" +
    "\001\002\000\014\004\017\005\015\006\004\012\024\046" +
    "\023\001\002\000\004\013\033\001\002\000\034\002\uffdb" +
    "\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\021\uffdb\022" +
    "\uffdb\047\uffdb\050\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002" +
    "\000\034\002\uffdd\007\uffdd\011\uffdd\013\uffdd\015\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\047\uffdd\050\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\001\002\000\034\002\uffde\007\uffde\011\uffde\013" +
    "\uffde\015\uffde\017\uffde\021\uffde\022\uffde\047\uffde\050\uffde" +
    "\054\uffde\055\uffde\056\uffde\001\002\000\012\011\027\013" +
    "\uffd9\021\030\022\031\001\002\000\004\013\uffda\001\002" +
    "\000\004\047\116\001\002\000\004\004\107\001\002\000" +
    "\012\047\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\012" +
    "\047\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\012\047" +
    "\uffff\054\uffff\055\uffff\056\uffff\001\002\000\004\004\075" +
    "\001\002\000\012\047\uffd0\054\045\055\041\056\047\001" +
    "\002\000\004\004\050\001\002\000\004\025\051\001\002" +
    "\000\010\004\053\016\054\036\057\001\002\000\012\047" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000\022\007\ufffb" +
    "\013\ufffb\017\ufffb\035\ufffb\047\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\001\002\000\006\004\062\017\ufff5\001\002\000\022" +
    "\007\ufff9\013\ufff9\017\ufff9\035\ufff9\047\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\001\002\000\022\007\ufffa\013\ufffa\017\ufffa" +
    "\035\ufffa\047\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000" +
    "\004\051\060\001\002\000\004\004\061\001\002\000\022" +
    "\007\ufff8\013\ufff8\017\ufff8\035\ufff8\047\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\001\002\000\004\010\072\001\002\000\004" +
    "\017\071\001\002\000\010\007\065\013\ufff3\017\ufff3\001" +
    "\002\000\004\004\062\001\002\000\006\013\ufff6\017\ufff6" +
    "\001\002\000\010\007\065\013\ufff3\017\ufff3\001\002\000" +
    "\006\013\ufff4\017\ufff4\001\002\000\022\007\ufff7\013\ufff7" +
    "\017\ufff7\035\ufff7\047\ufff7\054\ufff7\055\ufff7\056\ufff7\001" +
    "\002\000\010\004\053\016\054\036\057\001\002\000\010" +
    "\007\ufff2\013\ufff2\017\ufff2\001\002\000\004\047\uffd1\001" +
    "\002\000\004\012\076\001\002\000\006\004\062\013\ufff5" +
    "\001\002\000\004\013\100\001\002\000\006\010\102\025" +
    "\101\001\002\000\014\004\017\005\015\006\004\012\024" +
    "\046\023\001\002\000\004\004\103\001\002\000\004\025" +
    "\104\001\002\000\014\004\017\005\015\006\004\012\024" +
    "\046\023\001\002\000\016\021\030\022\031\047\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\001\002\000\016\021\030\022\031" +
    "\047\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002\000\006\010" +
    "\110\035\111\001\002\000\010\004\053\016\054\036\057" +
    "\001\002\000\014\004\017\005\015\006\004\012\024\046" +
    "\023\001\002\000\016\021\030\022\031\047\uffef\054\uffef" +
    "\055\uffef\056\uffef\001\002\000\004\035\114\001\002\000" +
    "\014\004\017\005\015\006\004\012\024\046\023\001\002" +
    "\000\016\021\030\022\031\047\uffee\054\uffee\055\uffee\056" +
    "\uffee\001\002\000\016\004\017\005\015\006\004\012\024" +
    "\046\023\050\uffd6\001\002\000\014\011\123\013\uffd4\021" +
    "\030\022\031\050\uffd4\001\002\000\004\050\121\001\002" +
    "\000\034\002\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\047\uffd2\050\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\001\002\000\006\013\uffd7\050\uffd7\001\002\000" +
    "\014\004\017\005\015\006\004\012\024\046\023\001\002" +
    "\000\014\011\123\013\uffd4\021\030\022\031\050\uffd4\001" +
    "\002\000\006\013\uffd5\050\uffd5\001\002\000\014\004\017" +
    "\005\015\006\004\012\024\046\023\001\002\000\014\004" +
    "\017\005\015\006\004\012\024\046\023\001\002\000\004" +
    "\004\131\001\002\000\042\002\uffe9\007\uffe9\011\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\035\uffe9\047\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001" +
    "\002\000\034\002\uffd3\007\uffd3\011\uffd3\013\uffd3\015\uffd3" +
    "\017\uffd3\021\030\022\031\047\uffd3\050\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\001\002\000\010\015\134\021\030\022\031" +
    "\001\002\000\042\002\uffea\007\uffea\011\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\035\uffea" +
    "\047\uffea\050\uffea\054\uffea\055\uffea\056\uffea\001\002\000" +
    "\006\004\146\017\uffcc\001\002\000\014\004\017\005\015" +
    "\006\004\012\024\046\023\001\002\000\016\004\017\005" +
    "\015\006\004\012\024\013\uffd6\046\023\001\002\000\004" +
    "\013\141\001\002\000\034\002\uffd8\007\uffd8\011\uffd8\013" +
    "\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\047\uffd8\050\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\001\002\000\010\015\143\021" +
    "\030\022\031\001\002\000\004\051\144\001\002\000\014" +
    "\004\017\005\015\006\004\012\024\046\023\001\002\000" +
    "\034\002\uffcf\007\uffcf\011\uffcf\013\uffcf\015\uffcf\017\uffcf" +
    "\021\030\022\031\047\uffcf\050\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\001\002\000\004\025\156\001\002\000\004\017\155" +
    "\001\002\000\006\007\151\017\uffca\001\002\000\004\004" +
    "\146\001\002\000\004\017\uffcd\001\002\000\006\007\151" +
    "\017\uffca\001\002\000\004\017\uffcb\001\002\000\034\002" +
    "\uffce\007\uffce\011\uffce\013\uffce\015\uffce\017\uffce\021\uffce" +
    "\022\uffce\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce\001" +
    "\002\000\014\004\017\005\015\006\004\012\024\046\023" +
    "\001\002\000\012\007\uffc9\017\uffc9\021\030\022\031\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\032\003\012\004\006\007\013\022\017\026" +
    "\011\027\005\033\021\034\020\035\015\037\004\040\010" +
    "\042\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\037\011\045\012\042\013\041\021\043\001\001" +
    "\000\030\004\024\007\013\022\017\026\011\027\005\033" +
    "\021\034\020\035\015\037\004\040\010\042\007\001\001" +
    "\000\004\041\031\001\001\000\002\001\001\000\030\004" +
    "\035\007\013\022\017\026\011\027\005\033\021\034\020" +
    "\035\015\037\004\040\010\042\007\001\001\000\030\004" +
    "\034\007\013\022\017\026\011\027\005\033\021\034\020" +
    "\035\015\037\004\040\010\042\007\001\001\000\030\004" +
    "\033\007\013\022\017\026\011\027\005\033\021\034\020" +
    "\035\015\037\004\040\010\042\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\073\011" +
    "\045\012\042\013\041\021\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\051\031\054\032\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\063" +
    "\016\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\065\001\001\000" +
    "\004\015\066\001\001\000\002\001\001\000\004\017\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\072\031\054\032\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\063\016\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\105" +
    "\007\013\022\017\026\011\027\005\033\021\034\020\035" +
    "\015\037\004\040\010\042\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\104\007\013\022\017\026" +
    "\011\027\005\033\021\034\020\035\015\037\004\040\010" +
    "\042\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\112\031\054\032\055\001\001" +
    "\000\030\004\111\007\013\022\017\026\011\027\005\033" +
    "\021\034\020\035\015\037\004\040\010\042\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\114\007" +
    "\013\022\017\026\011\027\005\033\021\034\020\035\015" +
    "\037\004\040\010\042\007\001\001\000\002\001\001\000" +
    "\032\004\116\005\117\007\013\022\017\026\011\027\005" +
    "\033\021\034\020\035\015\037\004\040\010\042\007\001" +
    "\001\000\004\006\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\123\007\013\022" +
    "\017\026\011\027\005\033\021\034\020\035\015\037\004" +
    "\040\010\042\007\001\001\000\004\006\124\001\001\000" +
    "\002\001\001\000\030\004\132\007\013\022\017\026\011" +
    "\027\005\033\021\034\020\035\015\037\004\040\010\042" +
    "\007\001\001\000\030\004\131\007\013\022\017\026\011" +
    "\027\005\033\021\034\020\035\015\037\004\040\010\042" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\146\025\147\001\001\000\030\004\141\007\013\022\017" +
    "\026\011\027\005\033\021\034\020\035\015\037\004\040" +
    "\010\042\007\001\001\000\032\004\116\005\137\007\013" +
    "\022\017\026\011\027\005\033\021\034\020\035\015\037" +
    "\004\040\010\042\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\144\007\013\022\017\026\011\027\005\033\021\034\020" +
    "\035\015\037\004\040\010\042\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\151" +
    "\001\001\000\004\025\152\001\001\000\002\001\001\000" +
    "\004\024\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\156\007\013\022\017\026\011\027\005\033" +
    "\021\034\020\035\015\037\004\040\010\042\007\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  //public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fieldCreate ::= ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*fieldCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fieldCreateListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fieldCreateListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fieldCreateList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fieldCreateList ::= fieldCreate fieldCreateListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*fieldCreateList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // recCreate ::= ID LBRACE fieldCreateList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*recCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arrCreate ::= ID LBRACK exp RBRACK OF exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(25/*arrCreate*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decList ::= dec decList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // letExp ::= LET decList IN expList END 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*letExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignment ::= lValue ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*assignment*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expListAux ::= SEMICOLON exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expList ::= exp expListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // callExp ::= ID LPAREN expList RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(32/*callExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // seqExpAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // seqExpAux ::= SEMICOLON exp seqExpAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*seqExpAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // seqExp ::= LPAREN exp seqExpAux RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seqExp ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*seqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // infixExp ::= exp MINUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // infixExp ::= exp PLUS exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // infixExp ::= INT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*infixExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= arrCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= letExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= assignment 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= recCreate 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= infixExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= callExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= seqExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= STRING 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= lValue 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldExp ::= lValue DOT ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(27/*fieldExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subscript ::= lValue LBRACK exp RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(26/*subscript*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lValue ::= fieldExp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lValue ::= subscript 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lValue ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lValue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDec ::= VAR ID COLON ty ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDec ::= VAR ID ASSIGN exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*varDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*funcDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fieldDec ::= ID COLON ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*fieldDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fieldDecListAux ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*fieldDecListAux*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fieldDecList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fieldDecList ::= fieldDec fieldDecListAux 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*fieldDecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recTy ::= LBRACE fieldDecList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(24/*recTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arrTy ::= ARRAY OF ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(23/*arrTy*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ty ::= arrTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ty ::= recTy 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ty ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tyDec ::= TYPE ID EQ ty 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*tyDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= funcDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= tyDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dec ::= varDec 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

