Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "DIVIDE" was declared but never used
Warning: Terminal "GE" was declared but never used
Warning: Terminal "AND" was declared but never used
Warning: Terminal "LT" was declared but never used
Warning: Terminal "NIL" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "LE" was declared but never used
Warning: Terminal "NEQ" was declared but never used
Warning: Terminal "BREAK" was declared but never used
Warning: Terminal "TIMES" was declared but never used
Warning: Terminal "GT" was declared but never used
Warning: Non terminal "varDecList" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #11
  between lValue ::= ID (*) 
  and     arrCreate ::= ID (*) LBRACK exp RBRACK OF exp 
  under symbol LBRACK
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #119
  between ifThen ::= IF exp THEN exp (*) 
  and     ifThenElse ::= IF exp THEN exp (*) ELSE exp 
  under symbol ELSE
  Resolved in favor of shifting.

  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]ID [3]STRING [4]INT 
[5]COMMA [6]COLON [7]SEMICOLON [8]LPAREN [9]RPAREN 
[10]LBRACK [11]RBRACK [12]LBRACE [13]RBRACE [14]DOT 
[15]PLUS [16]MINUS [17]TIMES [18]DIVIDE [19]EQ 
[20]NEQ [21]LT [22]LE [23]GT [24]GE 
[25]AND [26]OR [27]ASSIGN [28]ARRAY [29]IF 
[30]THEN [31]ELSE [32]WHILE [33]FOR [34]TO 
[35]DO [36]LET [37]IN [38]END [39]OF 
[40]BREAK [41]NIL [42]FUNCTION [43]VAR [44]TYPE 


===== Non terminals =====
[0]$START [1]program [2]exp [3]expList [4]expListAux 
[5]letExp [6]decList [7]dec [8]tyDec [9]funcDec 
[10]ty [11]fieldDec [12]fieldDecList [13]fieldDecListAux [14]varDecList 
[15]varDec [16]lValue [17]fieldCreateList [18]fieldCreateListAux [19]fieldCreate 
[20]recCreate [21]assignment [22]arrTy [23]recTy [24]arrCreate 
[25]subscript [26]fieldExp [27]infixExp [28]seqExp [29]seqExpAux 
[30]callExp [31]ifThen [32]ifThenElse [33]whileExp [34]forExp 


===== Productions =====
[0] $START ::= program EOF 
[1] program ::= exp 
[2] dec ::= varDec 
[3] dec ::= tyDec 
[4] dec ::= funcDec 
[5] tyDec ::= TYPE ID EQ ty 
[6] ty ::= ID 
[7] ty ::= recTy 
[8] ty ::= arrTy 
[9] arrTy ::= ARRAY OF ID 
[10] recTy ::= LBRACE fieldDecList RBRACE 
[11] fieldDecList ::= fieldDec fieldDecListAux 
[12] fieldDecList ::= 
[13] fieldDecListAux ::= COMMA fieldDec fieldDecListAux 
[14] fieldDecListAux ::= 
[15] fieldDec ::= ID COLON ty 
[16] funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp 
[17] funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp 
[18] varDec ::= VAR ID ASSIGN exp 
[19] varDec ::= VAR ID COLON ty ASSIGN exp 
[20] lValue ::= ID 
[21] lValue ::= subscript 
[22] lValue ::= fieldExp 
[23] subscript ::= lValue LBRACK exp RBRACK 
[24] fieldExp ::= lValue DOT ID 
[25] exp ::= lValue 
[26] exp ::= STRING 
[27] exp ::= seqExp 
[28] exp ::= callExp 
[29] exp ::= infixExp 
[30] exp ::= recCreate 
[31] exp ::= assignment 
[32] exp ::= ifThen 
[33] exp ::= ifThenElse 
[34] exp ::= whileExp 
[35] exp ::= forExp 
[36] exp ::= letExp 
[37] exp ::= arrCreate 
[38] infixExp ::= INT 
[39] infixExp ::= exp PLUS exp 
[40] infixExp ::= exp MINUS exp 
[41] seqExp ::= LPAREN RPAREN 
[42] seqExp ::= LPAREN exp seqExpAux RPAREN 
[43] seqExpAux ::= SEMICOLON exp seqExpAux 
[44] seqExpAux ::= 
[45] callExp ::= ID LPAREN expList RPAREN 
[46] expList ::= exp expListAux 
[47] expList ::= 
[48] expListAux ::= SEMICOLON exp expListAux 
[49] expListAux ::= 
[50] assignment ::= lValue ASSIGN exp 
[51] ifThen ::= IF exp THEN exp 
[52] ifThenElse ::= IF exp THEN exp ELSE exp 
[53] whileExp ::= WHILE exp DO exp 
[54] forExp ::= FOR ID ASSIGN exp TO exp DO exp 
[55] letExp ::= LET decList IN expList END 
[56] decList ::= dec decList 
[57] decList ::= 
[58] arrCreate ::= ID LBRACK exp RBRACK OF exp 
[59] recCreate ::= ID LBRACE fieldCreateList RBRACE 
[60] fieldCreateList ::= fieldCreate fieldCreateListAux 
[61] fieldCreateList ::= 
[62] fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux 
[63] fieldCreateListAux ::= 
[64] fieldCreate ::= ID EQ exp 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF PLUS MINUS }]
  [lValue ::= (*) ID , {EOF LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) lValue , {EOF PLUS MINUS }]
  [exp ::= (*) recCreate , {EOF PLUS MINUS }]
  [exp ::= (*) forExp , {EOF PLUS MINUS }]
  [infixExp ::= (*) exp MINUS exp , {EOF PLUS MINUS }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF PLUS MINUS }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF PLUS MINUS }]
  [letExp ::= (*) LET decList IN expList END , {EOF PLUS MINUS }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) callExp , {EOF PLUS MINUS }]
  [exp ::= (*) ifThenElse , {EOF PLUS MINUS }]
  [infixExp ::= (*) INT , {EOF PLUS MINUS }]
  [program ::= (*) exp , {EOF }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF PLUS MINUS }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF PLUS MINUS }]
  [lValue ::= (*) subscript , {EOF LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) STRING , {EOF PLUS MINUS }]
  [exp ::= (*) assignment , {EOF PLUS MINUS }]
  [exp ::= (*) letExp , {EOF PLUS MINUS }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF PLUS MINUS }]
  [ifThen ::= (*) IF exp THEN exp , {EOF PLUS MINUS }]
  [fieldExp ::= (*) lValue DOT ID , {EOF LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) infixExp , {EOF PLUS MINUS }]
  [exp ::= (*) whileExp , {EOF PLUS MINUS }]
  [infixExp ::= (*) exp PLUS exp , {EOF PLUS MINUS }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF PLUS MINUS }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF PLUS MINUS }]
  [lValue ::= (*) fieldExp , {EOF LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) seqExp , {EOF PLUS MINUS }]
  [exp ::= (*) ifThen , {EOF PLUS MINUS }]
  [exp ::= (*) arrCreate , {EOF PLUS MINUS }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF PLUS MINUS }]
  [$START ::= (*) program EOF , {EOF }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on program to state [9]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [6]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [1]: {
  [exp ::= infixExp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [2]: {
  [infixExp ::= INT (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [3]: {
  [fieldExp ::= lValue (*) DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= lValue (*) LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= lValue (*) ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= lValue (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on DOT to state [127]
transition on ASSIGN to state [126]
transition on LBRACK to state [125]

-------------------
lalr_state [4]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS DO }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) lValue , {PLUS MINUS DO }]
  [exp ::= (*) recCreate , {PLUS MINUS DO }]
  [exp ::= (*) forExp , {PLUS MINUS DO }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS DO }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS DO }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS DO }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS DO }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) callExp , {PLUS MINUS DO }]
  [exp ::= (*) ifThenElse , {PLUS MINUS DO }]
  [infixExp ::= (*) INT , {PLUS MINUS DO }]
  [whileExp ::= WHILE (*) exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS DO }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS DO }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) STRING , {PLUS MINUS DO }]
  [exp ::= (*) assignment , {PLUS MINUS DO }]
  [exp ::= (*) letExp , {PLUS MINUS DO }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS DO }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS DO }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) infixExp , {PLUS MINUS DO }]
  [exp ::= (*) whileExp , {PLUS MINUS DO }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS DO }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS DO }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS DO }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) seqExp , {PLUS MINUS DO }]
  [exp ::= (*) ifThen , {PLUS MINUS DO }]
  [exp ::= (*) arrCreate , {PLUS MINUS DO }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS DO }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [122]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [5]: {
  [exp ::= callExp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [6]: {
  [infixExp ::= exp (*) MINUS exp , {EOF PLUS MINUS }]
  [program ::= exp (*) , {EOF }]
  [infixExp ::= exp (*) PLUS exp , {EOF PLUS MINUS }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [7]: {
  [exp ::= whileExp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [8]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS THEN }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN THEN }]
  [exp ::= (*) lValue , {PLUS MINUS THEN }]
  [exp ::= (*) recCreate , {PLUS MINUS THEN }]
  [exp ::= (*) forExp , {PLUS MINUS THEN }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS THEN }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS THEN }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS THEN }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS THEN }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN THEN }]
  [exp ::= (*) callExp , {PLUS MINUS THEN }]
  [exp ::= (*) ifThenElse , {PLUS MINUS THEN }]
  [infixExp ::= (*) INT , {PLUS MINUS THEN }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS THEN }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS THEN }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN THEN }]
  [exp ::= (*) STRING , {PLUS MINUS THEN }]
  [exp ::= (*) assignment , {PLUS MINUS THEN }]
  [exp ::= (*) letExp , {PLUS MINUS THEN }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS THEN }]
  [ifThen ::= IF (*) exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS THEN }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN THEN }]
  [exp ::= (*) infixExp , {PLUS MINUS THEN }]
  [exp ::= (*) whileExp , {PLUS MINUS THEN }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS THEN }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS THEN }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS THEN }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN THEN }]
  [exp ::= (*) seqExp , {PLUS MINUS THEN }]
  [exp ::= (*) ifThen , {PLUS MINUS THEN }]
  [exp ::= (*) arrCreate , {PLUS MINUS THEN }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS THEN }]
  [ifThenElse ::= IF (*) exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [117]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [9]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [116]

-------------------
lalr_state [10]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) lValue , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) recCreate , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) forExp , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) exp MINUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
  [assignment ::= (*) lValue ASSIGN exp , {SEMICOLON RPAREN PLUS MINUS }]
  [letExp ::= (*) LET decList IN expList END , {SEMICOLON RPAREN PLUS MINUS }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) callExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) ifThenElse , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS }]
  [whileExp ::= (*) WHILE exp DO exp , {SEMICOLON RPAREN PLUS MINUS }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) subscript , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) assignment , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= LPAREN (*) RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= (*) LPAREN RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
  [ifThen ::= (*) IF exp THEN exp , {SEMICOLON RPAREN PLUS MINUS }]
  [fieldExp ::= (*) lValue DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) infixExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) whileExp , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) exp PLUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {SEMICOLON RPAREN PLUS MINUS }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) fieldExp , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) seqExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) ifThen , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= LPAREN (*) exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [110]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on RPAREN to state [109]
transition on infixExp to state [1]

-------------------
lalr_state [11]: {
  [recCreate ::= ID (*) LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= ID (*) LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= ID (*) , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= ID (*) LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on LPAREN to state [92]
transition on LBRACK to state [91]
transition on LBRACE to state [90]

-------------------
lalr_state [12]: {
  [exp ::= letExp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [13]: {
  [exp ::= ifThenElse (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [14]: {
  [exp ::= STRING (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [15]: {
  [exp ::= forExp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [16]: {
  [exp ::= arrCreate (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [17]: {
  [lValue ::= fieldExp (*) , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [18]: {
  [exp ::= assignment (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [19]: {
  [funcDec ::= (*) FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp , {IN FUNCTION VAR TYPE }]
  [decList ::= (*) , {IN }]
  [tyDec ::= (*) TYPE ID EQ ty , {IN FUNCTION VAR TYPE }]
  [dec ::= (*) varDec , {IN FUNCTION VAR TYPE }]
  [varDec ::= (*) VAR ID COLON ty ASSIGN exp , {IN FUNCTION VAR TYPE }]
  [funcDec ::= (*) FUNCTION ID LPAREN fieldDecList RPAREN EQ exp , {IN FUNCTION VAR TYPE }]
  [decList ::= (*) dec decList , {IN }]
  [dec ::= (*) funcDec , {IN FUNCTION VAR TYPE }]
  [varDec ::= (*) VAR ID ASSIGN exp , {IN FUNCTION VAR TYPE }]
  [letExp ::= LET (*) decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [dec ::= (*) tyDec , {IN FUNCTION VAR TYPE }]
}
transition on TYPE to state [43]
transition on dec to state [42]
transition on FUNCTION to state [41]
transition on varDec to state [40]
transition on tyDec to state [39]
transition on funcDec to state [38]
transition on VAR to state [37]
transition on decList to state [36]

-------------------
lalr_state [20]: {
  [exp ::= recCreate (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [21]: {
  [lValue ::= subscript (*) , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [22]: {
  [exp ::= ifThen (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [23]: {
  [forExp ::= FOR (*) ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on ID to state [25]

-------------------
lalr_state [24]: {
  [exp ::= seqExp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [25]: {
  [forExp ::= FOR ID (*) ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on ASSIGN to state [26]

-------------------
lalr_state [26]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS TO }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN TO }]
  [exp ::= (*) lValue , {PLUS MINUS TO }]
  [exp ::= (*) recCreate , {PLUS MINUS TO }]
  [exp ::= (*) forExp , {PLUS MINUS TO }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS TO }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS TO }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS TO }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS TO }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN TO }]
  [exp ::= (*) callExp , {PLUS MINUS TO }]
  [exp ::= (*) ifThenElse , {PLUS MINUS TO }]
  [infixExp ::= (*) INT , {PLUS MINUS TO }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS TO }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS TO }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN TO }]
  [exp ::= (*) STRING , {PLUS MINUS TO }]
  [exp ::= (*) assignment , {PLUS MINUS TO }]
  [exp ::= (*) letExp , {PLUS MINUS TO }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS TO }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS TO }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN TO }]
  [exp ::= (*) infixExp , {PLUS MINUS TO }]
  [exp ::= (*) whileExp , {PLUS MINUS TO }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS TO }]
  [forExp ::= FOR ID ASSIGN (*) exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS TO }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS TO }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN TO }]
  [exp ::= (*) seqExp , {PLUS MINUS TO }]
  [exp ::= (*) ifThen , {PLUS MINUS TO }]
  [exp ::= (*) arrCreate , {PLUS MINUS TO }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS TO }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [27]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [27]: {
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS TO }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS TO }]
  [forExp ::= FOR ID ASSIGN exp (*) TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on TO to state [28]

-------------------
lalr_state [28]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS DO }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) lValue , {PLUS MINUS DO }]
  [exp ::= (*) recCreate , {PLUS MINUS DO }]
  [exp ::= (*) forExp , {PLUS MINUS DO }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS DO }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS DO }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS DO }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS DO }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) callExp , {PLUS MINUS DO }]
  [exp ::= (*) ifThenElse , {PLUS MINUS DO }]
  [infixExp ::= (*) INT , {PLUS MINUS DO }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS DO }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS DO }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) STRING , {PLUS MINUS DO }]
  [exp ::= (*) assignment , {PLUS MINUS DO }]
  [exp ::= (*) letExp , {PLUS MINUS DO }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS DO }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS DO }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [forExp ::= FOR ID ASSIGN exp TO (*) exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {PLUS MINUS DO }]
  [exp ::= (*) whileExp , {PLUS MINUS DO }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS DO }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS DO }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS DO }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN DO }]
  [exp ::= (*) seqExp , {PLUS MINUS DO }]
  [exp ::= (*) ifThen , {PLUS MINUS DO }]
  [exp ::= (*) arrCreate , {PLUS MINUS DO }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS DO }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [33]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [29]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp PLUS (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [32]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [30]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp MINUS (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [31]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [31]: {
  [infixExp ::= exp MINUS exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [32]: {
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp PLUS exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [33]: {
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS DO }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS DO }]
  [forExp ::= FOR ID ASSIGN exp TO exp (*) DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on DO to state [34]

-------------------
lalr_state [34]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= FOR ID ASSIGN exp TO exp DO (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [35]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [35]: {
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= FOR ID ASSIGN exp TO exp DO exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [36]: {
  [letExp ::= LET decList (*) IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on IN to state [82]

-------------------
lalr_state [37]: {
  [varDec ::= VAR (*) ID ASSIGN exp , {IN FUNCTION VAR TYPE }]
  [varDec ::= VAR (*) ID COLON ty ASSIGN exp , {IN FUNCTION VAR TYPE }]
}
transition on ID to state [75]

-------------------
lalr_state [38]: {
  [dec ::= funcDec (*) , {IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [39]: {
  [dec ::= tyDec (*) , {IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [40]: {
  [dec ::= varDec (*) , {IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [41]: {
  [funcDec ::= FUNCTION (*) ID LPAREN fieldDecList RPAREN EQ exp , {IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION (*) ID LPAREN fieldDecList RPAREN COLON ID EQ exp , {IN FUNCTION VAR TYPE }]
}
transition on ID to state [65]

-------------------
lalr_state [42]: {
  [funcDec ::= (*) FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp , {IN FUNCTION VAR TYPE }]
  [decList ::= (*) , {IN }]
  [tyDec ::= (*) TYPE ID EQ ty , {IN FUNCTION VAR TYPE }]
  [dec ::= (*) varDec , {IN FUNCTION VAR TYPE }]
  [varDec ::= (*) VAR ID COLON ty ASSIGN exp , {IN FUNCTION VAR TYPE }]
  [funcDec ::= (*) FUNCTION ID LPAREN fieldDecList RPAREN EQ exp , {IN FUNCTION VAR TYPE }]
  [decList ::= dec (*) decList , {IN }]
  [decList ::= (*) dec decList , {IN }]
  [dec ::= (*) funcDec , {IN FUNCTION VAR TYPE }]
  [varDec ::= (*) VAR ID ASSIGN exp , {IN FUNCTION VAR TYPE }]
  [dec ::= (*) tyDec , {IN FUNCTION VAR TYPE }]
}
transition on TYPE to state [43]
transition on dec to state [42]
transition on FUNCTION to state [41]
transition on varDec to state [40]
transition on tyDec to state [39]
transition on funcDec to state [38]
transition on VAR to state [37]
transition on decList to state [64]

-------------------
lalr_state [43]: {
  [tyDec ::= TYPE (*) ID EQ ty , {IN FUNCTION VAR TYPE }]
}
transition on ID to state [44]

-------------------
lalr_state [44]: {
  [tyDec ::= TYPE ID (*) EQ ty , {IN FUNCTION VAR TYPE }]
}
transition on EQ to state [45]

-------------------
lalr_state [45]: {
  [ty ::= (*) arrTy , {IN FUNCTION VAR TYPE }]
  [recTy ::= (*) LBRACE fieldDecList RBRACE , {IN FUNCTION VAR TYPE }]
  [ty ::= (*) recTy , {IN FUNCTION VAR TYPE }]
  [arrTy ::= (*) ARRAY OF ID , {IN FUNCTION VAR TYPE }]
  [ty ::= (*) ID , {IN FUNCTION VAR TYPE }]
  [tyDec ::= TYPE ID EQ (*) ty , {IN FUNCTION VAR TYPE }]
}
transition on ARRAY to state [51]
transition on recTy to state [50]
transition on arrTy to state [49]
transition on LBRACE to state [48]
transition on ID to state [47]
transition on ty to state [46]

-------------------
lalr_state [46]: {
  [tyDec ::= TYPE ID EQ ty (*) , {IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [47]: {
  [ty ::= ID (*) , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [48]: {
  [recTy ::= LBRACE (*) fieldDecList RBRACE , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
  [fieldDec ::= (*) ID COLON ty , {COMMA RBRACE }]
  [fieldDecList ::= (*) , {RBRACE }]
  [fieldDecList ::= (*) fieldDec fieldDecListAux , {RBRACE }]
}
transition on fieldDec to state [56]
transition on fieldDecList to state [55]
transition on ID to state [54]

-------------------
lalr_state [49]: {
  [ty ::= arrTy (*) , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [50]: {
  [ty ::= recTy (*) , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [51]: {
  [arrTy ::= ARRAY (*) OF ID , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}
transition on OF to state [52]

-------------------
lalr_state [52]: {
  [arrTy ::= ARRAY OF (*) ID , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}
transition on ID to state [53]

-------------------
lalr_state [53]: {
  [arrTy ::= ARRAY OF ID (*) , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [54]: {
  [fieldDec ::= ID (*) COLON ty , {COMMA RPAREN RBRACE }]
}
transition on COLON to state [62]

-------------------
lalr_state [55]: {
  [recTy ::= LBRACE fieldDecList (*) RBRACE , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}
transition on RBRACE to state [61]

-------------------
lalr_state [56]: {
  [fieldDecListAux ::= (*) COMMA fieldDec fieldDecListAux , {RPAREN RBRACE }]
  [fieldDecListAux ::= (*) , {RPAREN RBRACE }]
  [fieldDecList ::= fieldDec (*) fieldDecListAux , {RPAREN RBRACE }]
}
transition on fieldDecListAux to state [58]
transition on COMMA to state [57]

-------------------
lalr_state [57]: {
  [fieldDecListAux ::= COMMA (*) fieldDec fieldDecListAux , {RPAREN RBRACE }]
  [fieldDec ::= (*) ID COLON ty , {COMMA RPAREN RBRACE }]
}
transition on fieldDec to state [59]
transition on ID to state [54]

-------------------
lalr_state [58]: {
  [fieldDecList ::= fieldDec fieldDecListAux (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [59]: {
  [fieldDecListAux ::= COMMA fieldDec (*) fieldDecListAux , {RPAREN RBRACE }]
  [fieldDecListAux ::= (*) COMMA fieldDec fieldDecListAux , {RPAREN RBRACE }]
  [fieldDecListAux ::= (*) , {RPAREN RBRACE }]
}
transition on fieldDecListAux to state [60]
transition on COMMA to state [57]

-------------------
lalr_state [60]: {
  [fieldDecListAux ::= COMMA fieldDec fieldDecListAux (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [61]: {
  [recTy ::= LBRACE fieldDecList RBRACE (*) , {COMMA RPAREN RBRACE ASSIGN IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [62]: {
  [ty ::= (*) arrTy , {COMMA RPAREN RBRACE }]
  [recTy ::= (*) LBRACE fieldDecList RBRACE , {COMMA RPAREN RBRACE }]
  [fieldDec ::= ID COLON (*) ty , {COMMA RPAREN RBRACE }]
  [ty ::= (*) recTy , {COMMA RPAREN RBRACE }]
  [arrTy ::= (*) ARRAY OF ID , {COMMA RPAREN RBRACE }]
  [ty ::= (*) ID , {COMMA RPAREN RBRACE }]
}
transition on ARRAY to state [51]
transition on recTy to state [50]
transition on arrTy to state [49]
transition on LBRACE to state [48]
transition on ty to state [63]
transition on ID to state [47]

-------------------
lalr_state [63]: {
  [fieldDec ::= ID COLON ty (*) , {COMMA RPAREN RBRACE }]
}

-------------------
lalr_state [64]: {
  [decList ::= dec decList (*) , {IN }]
}

-------------------
lalr_state [65]: {
  [funcDec ::= FUNCTION ID (*) LPAREN fieldDecList RPAREN COLON ID EQ exp , {IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION ID (*) LPAREN fieldDecList RPAREN EQ exp , {IN FUNCTION VAR TYPE }]
}
transition on LPAREN to state [66]

-------------------
lalr_state [66]: {
  [fieldDec ::= (*) ID COLON ty , {COMMA RPAREN }]
  [funcDec ::= FUNCTION ID LPAREN (*) fieldDecList RPAREN COLON ID EQ exp , {IN FUNCTION VAR TYPE }]
  [fieldDecList ::= (*) , {RPAREN }]
  [funcDec ::= FUNCTION ID LPAREN (*) fieldDecList RPAREN EQ exp , {IN FUNCTION VAR TYPE }]
  [fieldDecList ::= (*) fieldDec fieldDecListAux , {RPAREN }]
}
transition on fieldDec to state [56]
transition on fieldDecList to state [67]
transition on ID to state [54]

-------------------
lalr_state [67]: {
  [funcDec ::= FUNCTION ID LPAREN fieldDecList (*) RPAREN COLON ID EQ exp , {IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION ID LPAREN fieldDecList (*) RPAREN EQ exp , {IN FUNCTION VAR TYPE }]
}
transition on RPAREN to state [68]

-------------------
lalr_state [68]: {
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN (*) COLON ID EQ exp , {IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN (*) EQ exp , {IN FUNCTION VAR TYPE }]
}
transition on COLON to state [70]
transition on EQ to state [69]

-------------------
lalr_state [69]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ (*) exp , {IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [74]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [70]: {
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON (*) ID EQ exp , {IN FUNCTION VAR TYPE }]
}
transition on ID to state [71]

-------------------
lalr_state [71]: {
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID (*) EQ exp , {IN FUNCTION VAR TYPE }]
}
transition on EQ to state [72]

-------------------
lalr_state [72]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ (*) exp , {IN FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [73]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [73]: {
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN COLON ID EQ exp (*) , {IN FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [74]: {
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [funcDec ::= FUNCTION ID LPAREN fieldDecList RPAREN EQ exp (*) , {IN FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [75]: {
  [varDec ::= VAR ID (*) ASSIGN exp , {IN FUNCTION VAR TYPE }]
  [varDec ::= VAR ID (*) COLON ty ASSIGN exp , {IN FUNCTION VAR TYPE }]
}
transition on ASSIGN to state [77]
transition on COLON to state [76]

-------------------
lalr_state [76]: {
  [ty ::= (*) arrTy , {ASSIGN }]
  [recTy ::= (*) LBRACE fieldDecList RBRACE , {ASSIGN }]
  [ty ::= (*) recTy , {ASSIGN }]
  [arrTy ::= (*) ARRAY OF ID , {ASSIGN }]
  [ty ::= (*) ID , {ASSIGN }]
  [varDec ::= VAR ID COLON (*) ty ASSIGN exp , {IN FUNCTION VAR TYPE }]
}
transition on ARRAY to state [51]
transition on recTy to state [50]
transition on arrTy to state [49]
transition on LBRACE to state [48]
transition on ID to state [47]
transition on ty to state [79]

-------------------
lalr_state [77]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [varDec ::= VAR ID ASSIGN (*) exp , {IN FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [78]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [78]: {
  [varDec ::= VAR ID ASSIGN exp (*) , {IN FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [79]: {
  [varDec ::= VAR ID COLON ty (*) ASSIGN exp , {IN FUNCTION VAR TYPE }]
}
transition on ASSIGN to state [80]

-------------------
lalr_state [80]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [varDec ::= VAR ID COLON ty ASSIGN (*) exp , {IN FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {LBRACK DOT PLUS MINUS ASSIGN IN FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {PLUS MINUS IN FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [81]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [81]: {
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
  [varDec ::= VAR ID COLON ty ASSIGN exp (*) , {IN FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS IN FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [82]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {SEMICOLON PLUS MINUS END }]
  [lValue ::= (*) ID , {SEMICOLON LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) lValue , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) recCreate , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) forExp , {SEMICOLON PLUS MINUS END }]
  [infixExp ::= (*) exp MINUS exp , {SEMICOLON PLUS MINUS END }]
  [letExp ::= LET decList IN (*) expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {SEMICOLON PLUS MINUS END }]
  [assignment ::= (*) lValue ASSIGN exp , {SEMICOLON PLUS MINUS END }]
  [letExp ::= (*) LET decList IN expList END , {SEMICOLON PLUS MINUS END }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {SEMICOLON LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) callExp , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) ifThenElse , {SEMICOLON PLUS MINUS END }]
  [infixExp ::= (*) INT , {SEMICOLON PLUS MINUS END }]
  [whileExp ::= (*) WHILE exp DO exp , {SEMICOLON PLUS MINUS END }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {SEMICOLON PLUS MINUS END }]
  [lValue ::= (*) subscript , {SEMICOLON LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) STRING , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) assignment , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) letExp , {SEMICOLON PLUS MINUS END }]
  [seqExp ::= (*) LPAREN RPAREN , {SEMICOLON PLUS MINUS END }]
  [expList ::= (*) exp expListAux , {END }]
  [ifThen ::= (*) IF exp THEN exp , {SEMICOLON PLUS MINUS END }]
  [fieldExp ::= (*) lValue DOT ID , {SEMICOLON LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) infixExp , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) whileExp , {SEMICOLON PLUS MINUS END }]
  [infixExp ::= (*) exp PLUS exp , {SEMICOLON PLUS MINUS END }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {SEMICOLON PLUS MINUS END }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {SEMICOLON PLUS MINUS END }]
  [lValue ::= (*) fieldExp , {SEMICOLON LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) seqExp , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) ifThen , {SEMICOLON PLUS MINUS END }]
  [exp ::= (*) arrCreate , {SEMICOLON PLUS MINUS END }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {SEMICOLON PLUS MINUS END }]
  [expList ::= (*) , {END }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on expList to state [84]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [83]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [83]: {
  [expListAux ::= (*) , {RPAREN END }]
  [expList ::= exp (*) expListAux , {RPAREN END }]
  [infixExp ::= exp (*) MINUS exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [expListAux ::= (*) SEMICOLON exp expListAux , {RPAREN END }]
  [infixExp ::= exp (*) PLUS exp , {SEMICOLON RPAREN PLUS MINUS END }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on SEMICOLON to state [87]
transition on expListAux to state [86]

-------------------
lalr_state [84]: {
  [letExp ::= LET decList IN expList (*) END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on END to state [85]

-------------------
lalr_state [85]: {
  [letExp ::= LET decList IN expList END (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [86]: {
  [expList ::= exp expListAux (*) , {RPAREN END }]
}

-------------------
lalr_state [87]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [lValue ::= (*) ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) lValue , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) recCreate , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) forExp , {SEMICOLON RPAREN PLUS MINUS END }]
  [infixExp ::= (*) exp MINUS exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {SEMICOLON RPAREN PLUS MINUS END }]
  [assignment ::= (*) lValue ASSIGN exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [letExp ::= (*) LET decList IN expList END , {SEMICOLON RPAREN PLUS MINUS END }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) callExp , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) ifThenElse , {SEMICOLON RPAREN PLUS MINUS END }]
  [infixExp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS END }]
  [expListAux ::= SEMICOLON (*) exp expListAux , {RPAREN END }]
  [whileExp ::= (*) WHILE exp DO exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [lValue ::= (*) subscript , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) assignment , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) letExp , {SEMICOLON RPAREN PLUS MINUS END }]
  [seqExp ::= (*) LPAREN RPAREN , {SEMICOLON RPAREN PLUS MINUS END }]
  [ifThen ::= (*) IF exp THEN exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [fieldExp ::= (*) lValue DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) infixExp , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) whileExp , {SEMICOLON RPAREN PLUS MINUS END }]
  [infixExp ::= (*) exp PLUS exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {SEMICOLON RPAREN PLUS MINUS END }]
  [lValue ::= (*) fieldExp , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN END }]
  [exp ::= (*) seqExp , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) ifThen , {SEMICOLON RPAREN PLUS MINUS END }]
  [exp ::= (*) arrCreate , {SEMICOLON RPAREN PLUS MINUS END }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {SEMICOLON RPAREN PLUS MINUS END }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [88]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [88]: {
  [expListAux ::= (*) , {RPAREN END }]
  [expListAux ::= SEMICOLON exp (*) expListAux , {RPAREN END }]
  [infixExp ::= exp (*) MINUS exp , {SEMICOLON RPAREN PLUS MINUS END }]
  [expListAux ::= (*) SEMICOLON exp expListAux , {RPAREN END }]
  [infixExp ::= exp (*) PLUS exp , {SEMICOLON RPAREN PLUS MINUS END }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on SEMICOLON to state [87]
transition on expListAux to state [89]

-------------------
lalr_state [89]: {
  [expListAux ::= SEMICOLON exp expListAux (*) , {RPAREN END }]
}

-------------------
lalr_state [90]: {
  [fieldCreateList ::= (*) fieldCreate fieldCreateListAux , {RBRACE }]
  [recCreate ::= ID LBRACE (*) fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldCreate ::= (*) ID EQ exp , {COMMA RBRACE }]
  [fieldCreateList ::= (*) , {RBRACE }]
}
transition on fieldCreate to state [101]
transition on fieldCreateList to state [100]
transition on ID to state [99]

-------------------
lalr_state [91]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {RBRACK PLUS MINUS }]
  [lValue ::= (*) ID , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) lValue , {RBRACK PLUS MINUS }]
  [exp ::= (*) recCreate , {RBRACK PLUS MINUS }]
  [exp ::= (*) forExp , {RBRACK PLUS MINUS }]
  [infixExp ::= (*) exp MINUS exp , {RBRACK PLUS MINUS }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {RBRACK PLUS MINUS }]
  [assignment ::= (*) lValue ASSIGN exp , {RBRACK PLUS MINUS }]
  [letExp ::= (*) LET decList IN expList END , {RBRACK PLUS MINUS }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) callExp , {RBRACK PLUS MINUS }]
  [exp ::= (*) ifThenElse , {RBRACK PLUS MINUS }]
  [infixExp ::= (*) INT , {RBRACK PLUS MINUS }]
  [arrCreate ::= ID LBRACK (*) exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {RBRACK PLUS MINUS }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {RBRACK PLUS MINUS }]
  [lValue ::= (*) subscript , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) STRING , {RBRACK PLUS MINUS }]
  [exp ::= (*) assignment , {RBRACK PLUS MINUS }]
  [exp ::= (*) letExp , {RBRACK PLUS MINUS }]
  [seqExp ::= (*) LPAREN RPAREN , {RBRACK PLUS MINUS }]
  [ifThen ::= (*) IF exp THEN exp , {RBRACK PLUS MINUS }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) infixExp , {RBRACK PLUS MINUS }]
  [exp ::= (*) whileExp , {RBRACK PLUS MINUS }]
  [infixExp ::= (*) exp PLUS exp , {RBRACK PLUS MINUS }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {RBRACK PLUS MINUS }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {RBRACK PLUS MINUS }]
  [lValue ::= (*) fieldExp , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) seqExp , {RBRACK PLUS MINUS }]
  [exp ::= (*) ifThen , {RBRACK PLUS MINUS }]
  [exp ::= (*) arrCreate , {RBRACK PLUS MINUS }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {RBRACK PLUS MINUS }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [95]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [92]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) lValue , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) recCreate , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) forExp , {SEMICOLON RPAREN PLUS MINUS }]
  [callExp ::= ID LPAREN (*) expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
  [assignment ::= (*) lValue ASSIGN exp , {SEMICOLON RPAREN PLUS MINUS }]
  [letExp ::= (*) LET decList IN expList END , {SEMICOLON RPAREN PLUS MINUS }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) callExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) ifThenElse , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS }]
  [whileExp ::= (*) WHILE exp DO exp , {SEMICOLON RPAREN PLUS MINUS }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) subscript , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) assignment , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) letExp , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= (*) LPAREN RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
  [expList ::= (*) exp expListAux , {RPAREN }]
  [ifThen ::= (*) IF exp THEN exp , {SEMICOLON RPAREN PLUS MINUS }]
  [fieldExp ::= (*) lValue DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) infixExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) whileExp , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) exp PLUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {SEMICOLON RPAREN PLUS MINUS }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) fieldExp , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) seqExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) ifThen , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) arrCreate , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
  [expList ::= (*) , {RPAREN }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on expList to state [93]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [83]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [93]: {
  [callExp ::= ID LPAREN expList (*) RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on RPAREN to state [94]

-------------------
lalr_state [94]: {
  [callExp ::= ID LPAREN expList RPAREN (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [95]: {
  [infixExp ::= exp (*) MINUS exp , {RBRACK PLUS MINUS }]
  [arrCreate ::= ID LBRACK exp (*) RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {RBRACK PLUS MINUS }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on RBRACK to state [96]

-------------------
lalr_state [96]: {
  [arrCreate ::= ID LBRACK exp RBRACK (*) OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OF to state [97]

-------------------
lalr_state [97]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= ID LBRACK exp RBRACK OF (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [98]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [98]: {
  [arrCreate ::= ID LBRACK exp RBRACK OF exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [99]: {
  [fieldCreate ::= ID (*) EQ exp , {COMMA RBRACE }]
}
transition on EQ to state [107]

-------------------
lalr_state [100]: {
  [recCreate ::= ID LBRACE fieldCreateList (*) RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on RBRACE to state [106]

-------------------
lalr_state [101]: {
  [fieldCreateListAux ::= (*) , {RBRACE }]
  [fieldCreateList ::= fieldCreate (*) fieldCreateListAux , {RBRACE }]
  [fieldCreateListAux ::= (*) COMMA fieldCreate fieldCreateListAux , {RBRACE }]
}
transition on fieldCreateListAux to state [103]
transition on COMMA to state [102]

-------------------
lalr_state [102]: {
  [fieldCreateListAux ::= COMMA (*) fieldCreate fieldCreateListAux , {RBRACE }]
  [fieldCreate ::= (*) ID EQ exp , {COMMA RBRACE }]
}
transition on fieldCreate to state [104]
transition on ID to state [99]

-------------------
lalr_state [103]: {
  [fieldCreateList ::= fieldCreate fieldCreateListAux (*) , {RBRACE }]
}

-------------------
lalr_state [104]: {
  [fieldCreateListAux ::= (*) , {RBRACE }]
  [fieldCreateListAux ::= COMMA fieldCreate (*) fieldCreateListAux , {RBRACE }]
  [fieldCreateListAux ::= (*) COMMA fieldCreate fieldCreateListAux , {RBRACE }]
}
transition on fieldCreateListAux to state [105]
transition on COMMA to state [102]

-------------------
lalr_state [105]: {
  [fieldCreateListAux ::= COMMA fieldCreate fieldCreateListAux (*) , {RBRACE }]
}

-------------------
lalr_state [106]: {
  [recCreate ::= ID LBRACE fieldCreateList RBRACE (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [107]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {COMMA RBRACE PLUS MINUS }]
  [lValue ::= (*) ID , {COMMA LBRACK RBRACE DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) lValue , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) recCreate , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) forExp , {COMMA RBRACE PLUS MINUS }]
  [infixExp ::= (*) exp MINUS exp , {COMMA RBRACE PLUS MINUS }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {COMMA RBRACE PLUS MINUS }]
  [assignment ::= (*) lValue ASSIGN exp , {COMMA RBRACE PLUS MINUS }]
  [letExp ::= (*) LET decList IN expList END , {COMMA RBRACE PLUS MINUS }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {COMMA LBRACK RBRACE DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) callExp , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) ifThenElse , {COMMA RBRACE PLUS MINUS }]
  [infixExp ::= (*) INT , {COMMA RBRACE PLUS MINUS }]
  [whileExp ::= (*) WHILE exp DO exp , {COMMA RBRACE PLUS MINUS }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {COMMA RBRACE PLUS MINUS }]
  [lValue ::= (*) subscript , {COMMA LBRACK RBRACE DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) STRING , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) assignment , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) letExp , {COMMA RBRACE PLUS MINUS }]
  [seqExp ::= (*) LPAREN RPAREN , {COMMA RBRACE PLUS MINUS }]
  [ifThen ::= (*) IF exp THEN exp , {COMMA RBRACE PLUS MINUS }]
  [fieldExp ::= (*) lValue DOT ID , {COMMA LBRACK RBRACE DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) infixExp , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) whileExp , {COMMA RBRACE PLUS MINUS }]
  [infixExp ::= (*) exp PLUS exp , {COMMA RBRACE PLUS MINUS }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {COMMA RBRACE PLUS MINUS }]
  [fieldCreate ::= ID EQ (*) exp , {COMMA RBRACE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {COMMA RBRACE PLUS MINUS }]
  [lValue ::= (*) fieldExp , {COMMA LBRACK RBRACE DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) seqExp , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) ifThen , {COMMA RBRACE PLUS MINUS }]
  [exp ::= (*) arrCreate , {COMMA RBRACE PLUS MINUS }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {COMMA RBRACE PLUS MINUS }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [108]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [108]: {
  [infixExp ::= exp (*) MINUS exp , {COMMA RBRACE PLUS MINUS }]
  [fieldCreate ::= ID EQ exp (*) , {COMMA RBRACE }]
  [infixExp ::= exp (*) PLUS exp , {COMMA RBRACE PLUS MINUS }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [109]: {
  [seqExp ::= LPAREN RPAREN (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [110]: {
  [seqExpAux ::= (*) SEMICOLON exp seqExpAux , {RPAREN }]
  [infixExp ::= exp (*) MINUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= LPAREN exp (*) seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExpAux ::= (*) , {RPAREN }]
}
transition on seqExpAux to state [112]
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on SEMICOLON to state [111]

-------------------
lalr_state [111]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) lValue , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) recCreate , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) forExp , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) exp MINUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
  [assignment ::= (*) lValue ASSIGN exp , {SEMICOLON RPAREN PLUS MINUS }]
  [letExp ::= (*) LET decList IN expList END , {SEMICOLON RPAREN PLUS MINUS }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) callExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) ifThenElse , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExpAux ::= SEMICOLON (*) exp seqExpAux , {RPAREN }]
  [whileExp ::= (*) WHILE exp DO exp , {SEMICOLON RPAREN PLUS MINUS }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) subscript , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) assignment , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) letExp , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= (*) LPAREN RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
  [ifThen ::= (*) IF exp THEN exp , {SEMICOLON RPAREN PLUS MINUS }]
  [fieldExp ::= (*) lValue DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) infixExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) whileExp , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= (*) exp PLUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {SEMICOLON RPAREN PLUS MINUS }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {SEMICOLON RPAREN PLUS MINUS }]
  [lValue ::= (*) fieldExp , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) seqExp , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) ifThen , {SEMICOLON RPAREN PLUS MINUS }]
  [exp ::= (*) arrCreate , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {SEMICOLON RPAREN PLUS MINUS }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [114]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [112]: {
  [seqExp ::= LPAREN exp seqExpAux (*) RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on RPAREN to state [113]

-------------------
lalr_state [113]: {
  [seqExp ::= LPAREN exp seqExpAux RPAREN (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [114]: {
  [seqExpAux ::= SEMICOLON exp (*) seqExpAux , {RPAREN }]
  [seqExpAux ::= (*) SEMICOLON exp seqExpAux , {RPAREN }]
  [infixExp ::= exp (*) MINUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [infixExp ::= exp (*) PLUS exp , {SEMICOLON RPAREN PLUS MINUS }]
  [seqExpAux ::= (*) , {RPAREN }]
}
transition on seqExpAux to state [115]
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on SEMICOLON to state [111]

-------------------
lalr_state [115]: {
  [seqExpAux ::= SEMICOLON exp seqExpAux (*) , {RPAREN }]
}

-------------------
lalr_state [116]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [117]: {
  [ifThen ::= IF exp (*) THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS THEN }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS THEN }]
  [ifThenElse ::= IF exp (*) THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on THEN to state [118]

-------------------
lalr_state [118]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= IF exp THEN (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThenElse ::= IF exp THEN (*) exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [119]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [119]: {
  [ifThen ::= IF exp THEN exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThenElse ::= IF exp THEN exp (*) ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on ELSE to state [120]

-------------------
lalr_state [120]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThenElse ::= IF exp THEN exp ELSE (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [121]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [121]: {
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThenElse ::= IF exp THEN exp ELSE exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [122]: {
  [infixExp ::= exp (*) MINUS exp , {PLUS MINUS DO }]
  [whileExp ::= WHILE exp (*) DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {PLUS MINUS DO }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on DO to state [123]

-------------------
lalr_state [123]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= WHILE exp DO (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [124]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [124]: {
  [whileExp ::= WHILE exp DO exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [125]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {RBRACK PLUS MINUS }]
  [lValue ::= (*) ID , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) lValue , {RBRACK PLUS MINUS }]
  [exp ::= (*) recCreate , {RBRACK PLUS MINUS }]
  [exp ::= (*) forExp , {RBRACK PLUS MINUS }]
  [infixExp ::= (*) exp MINUS exp , {RBRACK PLUS MINUS }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {RBRACK PLUS MINUS }]
  [assignment ::= (*) lValue ASSIGN exp , {RBRACK PLUS MINUS }]
  [letExp ::= (*) LET decList IN expList END , {RBRACK PLUS MINUS }]
  [subscript ::= lValue LBRACK (*) exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) callExp , {RBRACK PLUS MINUS }]
  [exp ::= (*) ifThenElse , {RBRACK PLUS MINUS }]
  [infixExp ::= (*) INT , {RBRACK PLUS MINUS }]
  [whileExp ::= (*) WHILE exp DO exp , {RBRACK PLUS MINUS }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {RBRACK PLUS MINUS }]
  [lValue ::= (*) subscript , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) STRING , {RBRACK PLUS MINUS }]
  [exp ::= (*) assignment , {RBRACK PLUS MINUS }]
  [exp ::= (*) letExp , {RBRACK PLUS MINUS }]
  [seqExp ::= (*) LPAREN RPAREN , {RBRACK PLUS MINUS }]
  [ifThen ::= (*) IF exp THEN exp , {RBRACK PLUS MINUS }]
  [fieldExp ::= (*) lValue DOT ID , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) infixExp , {RBRACK PLUS MINUS }]
  [exp ::= (*) whileExp , {RBRACK PLUS MINUS }]
  [infixExp ::= (*) exp PLUS exp , {RBRACK PLUS MINUS }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {RBRACK PLUS MINUS }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {RBRACK PLUS MINUS }]
  [lValue ::= (*) fieldExp , {LBRACK RBRACK DOT PLUS MINUS ASSIGN }]
  [exp ::= (*) seqExp , {RBRACK PLUS MINUS }]
  [exp ::= (*) ifThen , {RBRACK PLUS MINUS }]
  [exp ::= (*) arrCreate , {RBRACK PLUS MINUS }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {RBRACK PLUS MINUS }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [130]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [126]: {
  [ifThenElse ::= (*) IF exp THEN exp ELSE exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) lValue , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) recCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) forExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= lValue ASSIGN (*) exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [callExp ::= (*) ID LPAREN expList RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= (*) lValue ASSIGN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [letExp ::= (*) LET decList IN expList END , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscript ::= (*) lValue LBRACK exp RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) callExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThenElse , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) INT , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [whileExp ::= (*) WHILE exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [arrCreate ::= (*) ID LBRACK exp RBRACK OF exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) subscript , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) STRING , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) assignment , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) letExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [ifThen ::= (*) IF exp THEN exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExp ::= (*) lValue DOT ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) infixExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) whileExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= (*) exp PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [forExp ::= (*) FOR ID ASSIGN exp TO exp DO exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [recCreate ::= (*) ID LBRACE fieldCreateList RBRACE , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [lValue ::= (*) fieldExp , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) seqExp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) ifThen , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [exp ::= (*) arrCreate , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [seqExp ::= (*) LPAREN exp seqExpAux RPAREN , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on seqExp to state [24]
transition on FOR to state [23]
transition on ifThen to state [22]
transition on subscript to state [21]
transition on recCreate to state [20]
transition on LET to state [19]
transition on assignment to state [18]
transition on fieldExp to state [17]
transition on arrCreate to state [16]
transition on forExp to state [15]
transition on STRING to state [14]
transition on ifThenElse to state [13]
transition on letExp to state [12]
transition on ID to state [11]
transition on LPAREN to state [10]
transition on IF to state [8]
transition on whileExp to state [7]
transition on exp to state [129]
transition on callExp to state [5]
transition on WHILE to state [4]
transition on lValue to state [3]
transition on INT to state [2]
transition on infixExp to state [1]

-------------------
lalr_state [127]: {
  [fieldExp ::= lValue DOT (*) ID , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on ID to state [128]

-------------------
lalr_state [128]: {
  [fieldExp ::= lValue DOT ID (*) , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [129]: {
  [infixExp ::= exp (*) MINUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [assignment ::= lValue ASSIGN exp (*) , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) PLUS exp , {EOF COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]

-------------------
lalr_state [130]: {
  [subscript ::= lValue LBRACK exp (*) RBRACK , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [infixExp ::= exp (*) MINUS exp , {RBRACK PLUS MINUS }]
  [infixExp ::= exp (*) PLUS exp , {RBRACK PLUS MINUS }]
}
transition on MINUS to state [30]
transition on PLUS to state [29]
transition on RBRACK to state [131]

-------------------
lalr_state [131]: {
  [subscript ::= lValue LBRACK exp RBRACK (*) , {EOF COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 14 warnings
  45 terminals, 35 non-terminals, and 65 productions declared, 
  producing 132 unique parse states.
  12 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  2 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10k)
