@ReturnType binop = Tree.BINOP;

/* binop of two expressions, each which returns a temp */
binop = BINOP(exp left, exp right) : 100
/* @Prologue reducer.setUpBinopExpression(p) */
@Reduction reducer.binopExpression(__p, left, right);

/* binop on expression and const */
binop = BINOP(exp left,  CONST(void) right) : 1
@Reduction reducer.binopExpression(__p, left, right);

/* binop on expression and const */
binop = BINOP(CONST(void) left, exp right) : 1
@Reduction reducer.binopExpression(__p, left, right);

/* binop on two consts, these can be folded */
binop = BINOP(CONST(void) left, CONST(void) right) : 1
@Reduction reducer.binopExpression(__p, left, right);