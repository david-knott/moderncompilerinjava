package chap3.programming.Parse;
import chap3.programming.ErrorMsg.*;

action code {: static String sym(String s) {
	         return s;
	        }
	    :};

parser code  {: 
//  public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error found (" + current.sym + ")", current);
  }

 ErrorMsg errorMsg;

/*
  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }*/

  public Grm(Lexer l, ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: Symbol token = lexer.nextToken();System.out.println("token:" + token);return token; :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, 
	LBRACK, RBRACK, LBRACE, RBRACE, DOT, PLUS, MINUS, 
	TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, AND, OR, 
	ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO, DO, 
	LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

non terminal program;
non terminal expr_list, expr;

start with program;
expr_list ::= expr_list expr:e {: System.out.println(e);:}
;
program ::= ID
;
